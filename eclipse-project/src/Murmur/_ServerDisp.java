// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_ServerDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * Per-server interface. This includes all methods for configuring and altering
 * the state of a single virtual server. You can retrieve a pointer to this interface
 * from one of the methods in {@link Meta}.
 **/
public abstract class _ServerDisp extends Ice.ObjectImpl implements Server
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Murmur::Server"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param __cb The callback object for the operation.
     * @param cb Callback interface which will receive notifications.
     **/
    public final void
    addCallback_async(AMD_Server_addCallback __cb, ServerCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException
    {
        addCallback_async(__cb, cb, null);
    }

    /**
     * Add a new channel.
     * @param __cb The callback object for the operation.
     * @param name Name of new channel.
     **/
    public final void
    addChannel_async(AMD_Server_addChannel __cb, String name, int parent)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException
    {
        addChannel_async(__cb, name, parent, null);
    }

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param __cb The callback object for the operation.
     * @param session Session of user which should receive context entry.
     * @param text Name of action shown to user.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     **/
    public final void
    addContextCallback_async(AMD_Server_addContextCallback __cb, int session, String action, String text, ServerContextCallbackPrx cb, int ctx)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException
    {
        addContextCallback_async(__cb, session, action, text, cb, ctx, null);
    }

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param __cb The callback object for the operation.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to add to.
     **/
    public final void
    addUserToGroup_async(AMD_Server_addUserToGroup __cb, int channelid, int session, String group)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        addUserToGroup_async(__cb, channelid, session, group, null);
    }

    /**
     * Delete server and all it's configuration.
     * @param __cb The callback object for the operation.
     **/
    public final void
    delete_async(AMD_Server_delete __cb)
        throws InvalidSecretException,
               ServerBootedException
    {
        delete_async(__cb, null);
    }

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param __cb The callback object for the operation.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     **/
    public final void
    getACL_async(AMD_Server_getACL __cb, int channelid)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException
    {
        getACL_async(__cb, channelid, null);
    }

    /**
     * Retrieve all configuration items.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getAllConf_async(AMD_Server_getAllConf __cb)
        throws InvalidSecretException
    {
        getAllConf_async(__cb, null);
    }

    /**
     * Fetch all current IP bans on the server.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getBans_async(AMD_Server_getBans __cb)
        throws InvalidSecretException,
               ServerBootedException
    {
        getBans_async(__cb, null);
    }

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param __cb The callback object for the operation.
     * @param session Connection ID of user. See {@link User.session}.
     **/
    public final void
    getCertificateList_async(AMD_Server_getCertificateList __cb, int session)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        getCertificateList_async(__cb, session, null);
    }

    /**
     * Get state of single channel.
     * @param __cb The callback object for the operation.
     * @param channelid ID of Channel. See {@link Channel.id}.
     **/
    public final void
    getChannelState_async(AMD_Server_getChannelState __cb, int channelid)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException
    {
        getChannelState_async(__cb, channelid, null);
    }

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getChannels_async(AMD_Server_getChannels __cb)
        throws InvalidSecretException,
               ServerBootedException
    {
        getChannels_async(__cb, null);
    }

    /**
     * Retrieve configuration item.
     * @param __cb The callback object for the operation.
     * @param key Configuration key.
     **/
    public final void
    getConf_async(AMD_Server_getConf __cb, String key)
        throws InvalidSecretException
    {
        getConf_async(__cb, key, null);
    }

    /**
     * Fetch log entries.
     * @param __cb The callback object for the operation.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     **/
    public final void
    getLog_async(AMD_Server_getLog __cb, int first, int last)
        throws InvalidSecretException
    {
        getLog_async(__cb, first, last, null);
    }

    /**
     * Fetch length of log
     * @param __cb The callback object for the operation.
     **/
    public final void
    getLogLen_async(AMD_Server_getLogLen __cb)
        throws InvalidSecretException
    {
        getLogLen_async(__cb, null);
    }

    /**
     * Fetch a group of registered users.
     * @param __cb The callback object for the operation.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     **/
    public final void
    getRegisteredUsers_async(AMD_Server_getRegisteredUsers __cb, String filter)
        throws InvalidSecretException,
               ServerBootedException
    {
        getRegisteredUsers_async(__cb, filter, null);
    }

    /**
     * Fetch registration for a single user.
     * @param __cb The callback object for the operation.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     **/
    public final void
    getRegistration_async(AMD_Server_getRegistration __cb, int userid)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException
    {
        getRegistration_async(__cb, userid, null);
    }

    /**
     * Get state of a single connected user. 
     * @param __cb The callback object for the operation.
     * @param session Connection ID of user. See {@link User.session}.
     **/
    public final void
    getState_async(AMD_Server_getState __cb, int session)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        getState_async(__cb, session, null);
    }

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param __cb The callback object for the operation.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     **/
    public final void
    getTexture_async(AMD_Server_getTexture __cb, int userid)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException
    {
        getTexture_async(__cb, userid, null);
    }

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getTree_async(AMD_Server_getTree __cb)
        throws InvalidSecretException,
               ServerBootedException
    {
        getTree_async(__cb, null);
    }

    /**
     * Get virtual server uptime.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getUptime_async(AMD_Server_getUptime __cb)
        throws InvalidSecretException,
               ServerBootedException
    {
        getUptime_async(__cb, null);
    }

    /**
     * Map a list of user names to a matching id.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getUserIds_async(AMD_Server_getUserIds __cb, String[] names)
        throws InvalidSecretException,
               ServerBootedException
    {
        getUserIds_async(__cb, names, null);
    }

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getUserNames_async(AMD_Server_getUserNames __cb, int[] ids)
        throws InvalidSecretException,
               ServerBootedException
    {
        getUserNames_async(__cb, ids, null);
    }

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getUsers_async(AMD_Server_getUsers __cb)
        throws InvalidSecretException,
               ServerBootedException
    {
        getUsers_async(__cb, null);
    }

    /**
     * Check if user is permitted to perform action.
     * @param __cb The callback object for the operation.
     * @param session Connection ID of user. See {@link User.session}.
     * @param perm Permission bits to check.
     **/
    public final void
    hasPermission_async(AMD_Server_hasPermission __cb, int session, int channelid, int perm)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        hasPermission_async(__cb, session, channelid, perm, null);
    }

    /**
     * Fetch the server id.
     * 
     * @param __cb The callback object for the operation.
     **/
    public final void
    id_async(AMD_Server_id __cb)
        throws InvalidSecretException
    {
        id_async(__cb, null);
    }

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __cb The callback object for the operation.
     **/
    public final void
    isRunning_async(AMD_Server_isRunning __cb)
        throws InvalidSecretException
    {
        isRunning_async(__cb, null);
    }

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param __cb The callback object for the operation.
     * @param session Connection ID of user. See {@link User.session}.
     **/
    public final void
    kickUser_async(AMD_Server_kickUser __cb, int session, String reason)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        kickUser_async(__cb, session, reason, null);
    }

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param __cb The callback object for the operation.
     * @param session Connection ID of user. See {@link User.session}.
     * @param target Group name to redirect to.
     **/
    public final void
    redirectWhisperGroup_async(AMD_Server_redirectWhisperGroup __cb, int session, String source, String target)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        redirectWhisperGroup_async(__cb, session, source, target, null);
    }

    /**
     * Register a new user.
     * @param __cb The callback object for the operation.
     * @param info Information about new user. Must include at least "name".
     **/
    public final void
    registerUser_async(AMD_Server_registerUser __cb, java.util.Map<UserInfo, java.lang.String> info)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException
    {
        registerUser_async(__cb, info, null);
    }

    /**
     * Remove a callback.
     * 
     * @param __cb The callback object for the operation.
     * @param cb Callback interface to be removed.
     **/
    public final void
    removeCallback_async(AMD_Server_removeCallback __cb, ServerCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException
    {
        removeCallback_async(__cb, cb, null);
    }

    /**
     * Remove a channel and all its subchannels.
     * @param __cb The callback object for the operation.
     * @param channelid ID of Channel. See {@link Channel.id}.
     **/
    public final void
    removeChannel_async(AMD_Server_removeChannel __cb, int channelid)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException
    {
        removeChannel_async(__cb, channelid, null);
    }

    /**
     * Remove a callback.
     * 
     * @param __cb The callback object for the operation.
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     **/
    public final void
    removeContextCallback_async(AMD_Server_removeContextCallback __cb, ServerContextCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException
    {
        removeContextCallback_async(__cb, cb, null);
    }

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param __cb The callback object for the operation.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to remove from.
     **/
    public final void
    removeUserFromGroup_async(AMD_Server_removeUserFromGroup __cb, int channelid, int session, String group)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        removeUserFromGroup_async(__cb, channelid, session, group, null);
    }

    /**
     * Send text message to a single user.
     * @param __cb The callback object for the operation.
     * @param session Connection ID of user. See {@link User.session}.
     **/
    public final void
    sendMessage_async(AMD_Server_sendMessage __cb, int session, String text)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        sendMessage_async(__cb, session, text, null);
    }

    /**
     * Send text message to channel or a tree of channels.
     * @param __cb The callback object for the operation.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param text Message to send.
     **/
    public final void
    sendMessageChannel_async(AMD_Server_sendMessageChannel __cb, int channelid, boolean tree, String text)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException
    {
        sendMessageChannel_async(__cb, channelid, tree, text, null);
    }

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param __cb The callback object for the operation.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param groups List of groups on the channel.
     **/
    public final void
    setACL_async(AMD_Server_setACL __cb, int channelid, ACL[] acls, Group[] groups, boolean inherit)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException
    {
        setACL_async(__cb, channelid, acls, groups, inherit, null);
    }

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param __cb The callback object for the operation.
     * @param auth Authenticator object to perform subsequent authentications.
     **/
    public final void
    setAuthenticator_async(AMD_Server_setAuthenticator __cb, ServerAuthenticatorPrx auth)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException
    {
        setAuthenticator_async(__cb, auth, null);
    }

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param __cb The callback object for the operation.
     * @param bans List of bans.
     **/
    public final void
    setBans_async(AMD_Server_setBans __cb, Ban[] bans)
        throws InvalidSecretException,
               ServerBootedException
    {
        setBans_async(__cb, bans, null);
    }

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param __cb The callback object for the operation.
     * @param state Channel state to set.
     **/
    public final void
    setChannelState_async(AMD_Server_setChannelState __cb, Channel state)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException
    {
        setChannelState_async(__cb, state, null);
    }

    /**
     * Set a configuration item.
     * @param __cb The callback object for the operation.
     * @param key Configuration key.
     **/
    public final void
    setConf_async(AMD_Server_setConf __cb, String key, String value)
        throws InvalidSecretException
    {
        setConf_async(__cb, key, value, null);
    }

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param __cb The callback object for the operation.
     * @param state User state to set.
     **/
    public final void
    setState_async(AMD_Server_setState __cb, User state)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException
    {
        setState_async(__cb, state, null);
    }

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param __cb The callback object for the operation.
     * @param pw Password.
     **/
    public final void
    setSuperuserPassword_async(AMD_Server_setSuperuserPassword __cb, String pw)
        throws InvalidSecretException
    {
        setSuperuserPassword_async(__cb, pw, null);
    }

    /**
     * Set a user texture (now called avatar).
     * @param __cb The callback object for the operation.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     **/
    public final void
    setTexture_async(AMD_Server_setTexture __cb, int userid, byte[] tex)
        throws InvalidSecretException,
               InvalidTextureException,
               InvalidUserException,
               ServerBootedException
    {
        setTexture_async(__cb, userid, tex, null);
    }

    /**
     * Start server.
     * @param __cb The callback object for the operation.
     **/
    public final void
    start_async(AMD_Server_start __cb)
        throws InvalidSecretException,
               ServerBootedException,
               ServerFailureException
    {
        start_async(__cb, null);
    }

    /**
     * Stop server.
     * @param __cb The callback object for the operation.
     **/
    public final void
    stop_async(AMD_Server_stop __cb)
        throws InvalidSecretException,
               ServerBootedException
    {
        stop_async(__cb, null);
    }

    /**
     * Remove a user registration.
     * @param __cb The callback object for the operation.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     **/
    public final void
    unregisterUser_async(AMD_Server_unregisterUser __cb, int userid)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException
    {
        unregisterUser_async(__cb, userid, null);
    }

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param __cb The callback object for the operation.
     **/
    public final void
    updateRegistration_async(AMD_Server_updateRegistration __cb, int userid, java.util.Map<UserInfo, java.lang.String> info)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException
    {
        updateRegistration_async(__cb, userid, info, null);
    }

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param __cb The callback object for the operation.
     * @param name User name. See {@link RegisteredUser.name}.
     **/
    public final void
    verifyPassword_async(AMD_Server_verifyPassword __cb, String name, String pw)
        throws InvalidSecretException,
               ServerBootedException
    {
        verifyPassword_async(__cb, name, pw, null);
    }

    public static Ice.DispatchStatus
    ___isRunning(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_isRunning __cb = new _AMD_Server_isRunning(__inS);
        try
        {
            __obj.isRunning_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___start(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_start __cb = new _AMD_Server_start(__inS);
        try
        {
            __obj.start_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___stop(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_stop __cb = new _AMD_Server_stop(__inS);
        try
        {
            __obj.stop_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___delete(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_delete __cb = new _AMD_Server_delete(__inS);
        try
        {
            __obj.delete_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___id(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_id __cb = new _AMD_Server_id(__inS);
        try
        {
            __obj.id_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___addCallback(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ServerCallbackPrx cb;
        cb = ServerCallbackPrxHelper.__read(__is);
        __is.endReadEncaps();
        AMD_Server_addCallback __cb = new _AMD_Server_addCallback(__inS);
        try
        {
            __obj.addCallback_async(__cb, cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___removeCallback(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ServerCallbackPrx cb;
        cb = ServerCallbackPrxHelper.__read(__is);
        __is.endReadEncaps();
        AMD_Server_removeCallback __cb = new _AMD_Server_removeCallback(__inS);
        try
        {
            __obj.removeCallback_async(__cb, cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setAuthenticator(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ServerAuthenticatorPrx auth;
        auth = ServerAuthenticatorPrxHelper.__read(__is);
        __is.endReadEncaps();
        AMD_Server_setAuthenticator __cb = new _AMD_Server_setAuthenticator(__inS);
        try
        {
            __obj.setAuthenticator_async(__cb, auth, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getConf(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String key;
        key = __is.readString();
        __is.endReadEncaps();
        AMD_Server_getConf __cb = new _AMD_Server_getConf(__inS);
        try
        {
            __obj.getConf_async(__cb, key, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getAllConf(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_getAllConf __cb = new _AMD_Server_getAllConf(__inS);
        try
        {
            __obj.getAllConf_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setConf(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String key;
        key = __is.readString();
        String value;
        value = __is.readString();
        __is.endReadEncaps();
        AMD_Server_setConf __cb = new _AMD_Server_setConf(__inS);
        try
        {
            __obj.setConf_async(__cb, key, value, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setSuperuserPassword(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String pw;
        pw = __is.readString();
        __is.endReadEncaps();
        AMD_Server_setSuperuserPassword __cb = new _AMD_Server_setSuperuserPassword(__inS);
        try
        {
            __obj.setSuperuserPassword_async(__cb, pw, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getLog(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int first;
        first = __is.readInt();
        int last;
        last = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_getLog __cb = new _AMD_Server_getLog(__inS);
        try
        {
            __obj.getLog_async(__cb, first, last, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getLogLen(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_getLogLen __cb = new _AMD_Server_getLogLen(__inS);
        try
        {
            __obj.getLogLen_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getUsers(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_getUsers __cb = new _AMD_Server_getUsers(__inS);
        try
        {
            __obj.getUsers_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getChannels(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_getChannels __cb = new _AMD_Server_getChannels(__inS);
        try
        {
            __obj.getChannels_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getCertificateList(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int session;
        session = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_getCertificateList __cb = new _AMD_Server_getCertificateList(__inS);
        try
        {
            __obj.getCertificateList_async(__cb, session, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getTree(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_getTree __cb = new _AMD_Server_getTree(__inS);
        try
        {
            __obj.getTree_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getBans(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_getBans __cb = new _AMD_Server_getBans(__inS);
        try
        {
            __obj.getBans_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setBans(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        Ban[] bans;
        bans = BanListHelper.read(__is);
        __is.endReadEncaps();
        AMD_Server_setBans __cb = new _AMD_Server_setBans(__inS);
        try
        {
            __obj.setBans_async(__cb, bans, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___kickUser(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int session;
        session = __is.readInt();
        String reason;
        reason = __is.readString();
        __is.endReadEncaps();
        AMD_Server_kickUser __cb = new _AMD_Server_kickUser(__inS);
        try
        {
            __obj.kickUser_async(__cb, session, reason, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getState(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int session;
        session = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_getState __cb = new _AMD_Server_getState(__inS);
        try
        {
            __obj.getState_async(__cb, session, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setState(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        User state;
        state = new User();
        state.__read(__is);
        __is.endReadEncaps();
        AMD_Server_setState __cb = new _AMD_Server_setState(__inS);
        try
        {
            __obj.setState_async(__cb, state, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___sendMessage(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int session;
        session = __is.readInt();
        String text;
        text = __is.readString();
        __is.endReadEncaps();
        AMD_Server_sendMessage __cb = new _AMD_Server_sendMessage(__inS);
        try
        {
            __obj.sendMessage_async(__cb, session, text, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___hasPermission(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int session;
        session = __is.readInt();
        int channelid;
        channelid = __is.readInt();
        int perm;
        perm = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_hasPermission __cb = new _AMD_Server_hasPermission(__inS);
        try
        {
            __obj.hasPermission_async(__cb, session, channelid, perm, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___addContextCallback(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int session;
        session = __is.readInt();
        String action;
        action = __is.readString();
        String text;
        text = __is.readString();
        ServerContextCallbackPrx cb;
        cb = ServerContextCallbackPrxHelper.__read(__is);
        int ctx;
        ctx = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_addContextCallback __cb = new _AMD_Server_addContextCallback(__inS);
        try
        {
            __obj.addContextCallback_async(__cb, session, action, text, cb, ctx, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___removeContextCallback(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        ServerContextCallbackPrx cb;
        cb = ServerContextCallbackPrxHelper.__read(__is);
        __is.endReadEncaps();
        AMD_Server_removeContextCallback __cb = new _AMD_Server_removeContextCallback(__inS);
        try
        {
            __obj.removeContextCallback_async(__cb, cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getChannelState(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int channelid;
        channelid = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_getChannelState __cb = new _AMD_Server_getChannelState(__inS);
        try
        {
            __obj.getChannelState_async(__cb, channelid, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setChannelState(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        Channel state;
        state = new Channel();
        state.__read(__is);
        __is.endReadEncaps();
        AMD_Server_setChannelState __cb = new _AMD_Server_setChannelState(__inS);
        try
        {
            __obj.setChannelState_async(__cb, state, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___removeChannel(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int channelid;
        channelid = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_removeChannel __cb = new _AMD_Server_removeChannel(__inS);
        try
        {
            __obj.removeChannel_async(__cb, channelid, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___addChannel(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String name;
        name = __is.readString();
        int parent;
        parent = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_addChannel __cb = new _AMD_Server_addChannel(__inS);
        try
        {
            __obj.addChannel_async(__cb, name, parent, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___sendMessageChannel(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int channelid;
        channelid = __is.readInt();
        boolean tree;
        tree = __is.readBool();
        String text;
        text = __is.readString();
        __is.endReadEncaps();
        AMD_Server_sendMessageChannel __cb = new _AMD_Server_sendMessageChannel(__inS);
        try
        {
            __obj.sendMessageChannel_async(__cb, channelid, tree, text, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getACL(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int channelid;
        channelid = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_getACL __cb = new _AMD_Server_getACL(__inS);
        try
        {
            __obj.getACL_async(__cb, channelid, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setACL(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int channelid;
        channelid = __is.readInt();
        ACL[] acls;
        acls = ACLListHelper.read(__is);
        Group[] groups;
        groups = GroupListHelper.read(__is);
        boolean inherit;
        inherit = __is.readBool();
        __is.endReadEncaps();
        AMD_Server_setACL __cb = new _AMD_Server_setACL(__inS);
        try
        {
            __obj.setACL_async(__cb, channelid, acls, groups, inherit, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___addUserToGroup(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int channelid;
        channelid = __is.readInt();
        int session;
        session = __is.readInt();
        String group;
        group = __is.readString();
        __is.endReadEncaps();
        AMD_Server_addUserToGroup __cb = new _AMD_Server_addUserToGroup(__inS);
        try
        {
            __obj.addUserToGroup_async(__cb, channelid, session, group, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___removeUserFromGroup(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int channelid;
        channelid = __is.readInt();
        int session;
        session = __is.readInt();
        String group;
        group = __is.readString();
        __is.endReadEncaps();
        AMD_Server_removeUserFromGroup __cb = new _AMD_Server_removeUserFromGroup(__inS);
        try
        {
            __obj.removeUserFromGroup_async(__cb, channelid, session, group, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___redirectWhisperGroup(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int session;
        session = __is.readInt();
        String source;
        source = __is.readString();
        String target;
        target = __is.readString();
        __is.endReadEncaps();
        AMD_Server_redirectWhisperGroup __cb = new _AMD_Server_redirectWhisperGroup(__inS);
        try
        {
            __obj.redirectWhisperGroup_async(__cb, session, source, target, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getUserNames(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int[] ids;
        ids = IdListHelper.read(__is);
        __is.endReadEncaps();
        AMD_Server_getUserNames __cb = new _AMD_Server_getUserNames(__inS);
        try
        {
            __obj.getUserNames_async(__cb, ids, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getUserIds(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String[] names;
        names = NameListHelper.read(__is);
        __is.endReadEncaps();
        AMD_Server_getUserIds __cb = new _AMD_Server_getUserIds(__inS);
        try
        {
            __obj.getUserIds_async(__cb, names, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___registerUser(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        java.util.Map<UserInfo, java.lang.String> info;
        info = UserInfoMapHelper.read(__is);
        __is.endReadEncaps();
        AMD_Server_registerUser __cb = new _AMD_Server_registerUser(__inS);
        try
        {
            __obj.registerUser_async(__cb, info, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___unregisterUser(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int userid;
        userid = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_unregisterUser __cb = new _AMD_Server_unregisterUser(__inS);
        try
        {
            __obj.unregisterUser_async(__cb, userid, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___updateRegistration(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int userid;
        userid = __is.readInt();
        java.util.Map<UserInfo, java.lang.String> info;
        info = UserInfoMapHelper.read(__is);
        __is.endReadEncaps();
        AMD_Server_updateRegistration __cb = new _AMD_Server_updateRegistration(__inS);
        try
        {
            __obj.updateRegistration_async(__cb, userid, info, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getRegistration(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int userid;
        userid = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_getRegistration __cb = new _AMD_Server_getRegistration(__inS);
        try
        {
            __obj.getRegistration_async(__cb, userid, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getRegisteredUsers(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String filter;
        filter = __is.readString();
        __is.endReadEncaps();
        AMD_Server_getRegisteredUsers __cb = new _AMD_Server_getRegisteredUsers(__inS);
        try
        {
            __obj.getRegisteredUsers_async(__cb, filter, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___verifyPassword(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String name;
        name = __is.readString();
        String pw;
        pw = __is.readString();
        __is.endReadEncaps();
        AMD_Server_verifyPassword __cb = new _AMD_Server_verifyPassword(__inS);
        try
        {
            __obj.verifyPassword_async(__cb, name, pw, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getTexture(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int userid;
        userid = __is.readInt();
        __is.endReadEncaps();
        AMD_Server_getTexture __cb = new _AMD_Server_getTexture(__inS);
        try
        {
            __obj.getTexture_async(__cb, userid, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___setTexture(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int userid;
        userid = __is.readInt();
        byte[] tex;
        tex = TextureHelper.read(__is);
        __is.endReadEncaps();
        AMD_Server_setTexture __cb = new _AMD_Server_setTexture(__inS);
        try
        {
            __obj.setTexture_async(__cb, userid, tex, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getUptime(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Server_getUptime __cb = new _AMD_Server_getUptime(__inS);
        try
        {
            __obj.getUptime_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "addCallback",
        "addChannel",
        "addContextCallback",
        "addUserToGroup",
        "delete",
        "getACL",
        "getAllConf",
        "getBans",
        "getCertificateList",
        "getChannelState",
        "getChannels",
        "getConf",
        "getLog",
        "getLogLen",
        "getRegisteredUsers",
        "getRegistration",
        "getState",
        "getTexture",
        "getTree",
        "getUptime",
        "getUserIds",
        "getUserNames",
        "getUsers",
        "hasPermission",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "id",
        "isRunning",
        "kickUser",
        "redirectWhisperGroup",
        "registerUser",
        "removeCallback",
        "removeChannel",
        "removeContextCallback",
        "removeUserFromGroup",
        "sendMessage",
        "sendMessageChannel",
        "setACL",
        "setAuthenticator",
        "setBans",
        "setChannelState",
        "setConf",
        "setState",
        "setSuperuserPassword",
        "setTexture",
        "start",
        "stop",
        "unregisterUser",
        "updateRegistration",
        "verifyPassword"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addCallback(this, in, __current);
            }
            case 1:
            {
                return ___addChannel(this, in, __current);
            }
            case 2:
            {
                return ___addContextCallback(this, in, __current);
            }
            case 3:
            {
                return ___addUserToGroup(this, in, __current);
            }
            case 4:
            {
                return ___delete(this, in, __current);
            }
            case 5:
            {
                return ___getACL(this, in, __current);
            }
            case 6:
            {
                return ___getAllConf(this, in, __current);
            }
            case 7:
            {
                return ___getBans(this, in, __current);
            }
            case 8:
            {
                return ___getCertificateList(this, in, __current);
            }
            case 9:
            {
                return ___getChannelState(this, in, __current);
            }
            case 10:
            {
                return ___getChannels(this, in, __current);
            }
            case 11:
            {
                return ___getConf(this, in, __current);
            }
            case 12:
            {
                return ___getLog(this, in, __current);
            }
            case 13:
            {
                return ___getLogLen(this, in, __current);
            }
            case 14:
            {
                return ___getRegisteredUsers(this, in, __current);
            }
            case 15:
            {
                return ___getRegistration(this, in, __current);
            }
            case 16:
            {
                return ___getState(this, in, __current);
            }
            case 17:
            {
                return ___getTexture(this, in, __current);
            }
            case 18:
            {
                return ___getTree(this, in, __current);
            }
            case 19:
            {
                return ___getUptime(this, in, __current);
            }
            case 20:
            {
                return ___getUserIds(this, in, __current);
            }
            case 21:
            {
                return ___getUserNames(this, in, __current);
            }
            case 22:
            {
                return ___getUsers(this, in, __current);
            }
            case 23:
            {
                return ___hasPermission(this, in, __current);
            }
            case 24:
            {
                return ___ice_id(this, in, __current);
            }
            case 25:
            {
                return ___ice_ids(this, in, __current);
            }
            case 26:
            {
                return ___ice_isA(this, in, __current);
            }
            case 27:
            {
                return ___ice_ping(this, in, __current);
            }
            case 28:
            {
                return ___id(this, in, __current);
            }
            case 29:
            {
                return ___isRunning(this, in, __current);
            }
            case 30:
            {
                return ___kickUser(this, in, __current);
            }
            case 31:
            {
                return ___redirectWhisperGroup(this, in, __current);
            }
            case 32:
            {
                return ___registerUser(this, in, __current);
            }
            case 33:
            {
                return ___removeCallback(this, in, __current);
            }
            case 34:
            {
                return ___removeChannel(this, in, __current);
            }
            case 35:
            {
                return ___removeContextCallback(this, in, __current);
            }
            case 36:
            {
                return ___removeUserFromGroup(this, in, __current);
            }
            case 37:
            {
                return ___sendMessage(this, in, __current);
            }
            case 38:
            {
                return ___sendMessageChannel(this, in, __current);
            }
            case 39:
            {
                return ___setACL(this, in, __current);
            }
            case 40:
            {
                return ___setAuthenticator(this, in, __current);
            }
            case 41:
            {
                return ___setBans(this, in, __current);
            }
            case 42:
            {
                return ___setChannelState(this, in, __current);
            }
            case 43:
            {
                return ___setConf(this, in, __current);
            }
            case 44:
            {
                return ___setState(this, in, __current);
            }
            case 45:
            {
                return ___setSuperuserPassword(this, in, __current);
            }
            case 46:
            {
                return ___setTexture(this, in, __current);
            }
            case 47:
            {
                return ___start(this, in, __current);
            }
            case 48:
            {
                return ___stop(this, in, __current);
            }
            case 49:
            {
                return ___unregisterUser(this, in, __current);
            }
            case 50:
            {
                return ___updateRegistration(this, in, __current);
            }
            case 51:
            {
                return ___verifyPassword(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Murmur::Server was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Murmur::Server was not generated with stream support";
        throw ex;
    }
}
