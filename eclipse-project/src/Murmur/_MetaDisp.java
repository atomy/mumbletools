// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_MetaDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * This is the meta interface. It is primarily used for retrieving the {@link Server} interfaces for each individual server.
 **/
public abstract class _MetaDisp extends Ice.ObjectImpl implements Meta
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Murmur::Meta"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param __cb The callback object for the operation.
     * @param cb Callback interface which will receive notifications.
     **/
    public final void
    addCallback_async(AMD_Meta_addCallback __cb, MetaCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException
    {
        addCallback_async(__cb, cb, null);
    }

    /**
     * Fetch list of all defined servers.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getAllServers_async(AMD_Meta_getAllServers __cb)
        throws InvalidSecretException
    {
        getAllServers_async(__cb, null);
    }

    /**
     * Fetch list of all currently running servers.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getBootedServers_async(AMD_Meta_getBootedServers __cb)
        throws InvalidSecretException
    {
        getBootedServers_async(__cb, null);
    }

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __cb The callback object for the operation.
     **/
    public final void
    getDefaultConf_async(AMD_Meta_getDefaultConf __cb)
        throws InvalidSecretException
    {
        getDefaultConf_async(__cb, null);
    }

    /**
     * Fetch interface to specific server.
     * @param __cb The callback object for the operation.
     * @param id Server ID. See {@link Server.getId}.
     **/
    public final void
    getServer_async(AMD_Meta_getServer __cb, int id)
        throws InvalidSecretException
    {
        getServer_async(__cb, id, null);
    }

    /**
     * Get slice file.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getSlice_async(AMD_Meta_getSlice __cb)
    {
        getSlice_async(__cb, null);
    }

    /**
     * Returns a checksum dict for the slice file.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getSliceChecksums_async(AMD_Meta_getSliceChecksums __cb)
    {
        getSliceChecksums_async(__cb, null);
    }

    /**
     * Get murmur uptime.
     * @param __cb The callback object for the operation.
     **/
    public final void
    getUptime_async(AMD_Meta_getUptime __cb)
    {
        getUptime_async(__cb, null);
    }

    /**
     * Fetch version of Murmur. 
     * @param __cb The callback object for the operation.
     **/
    public final void
    getVersion_async(AMD_Meta_getVersion __cb)
    {
        getVersion_async(__cb, null);
    }

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __cb The callback object for the operation.
     **/
    public final void
    newServer_async(AMD_Meta_newServer __cb)
        throws InvalidSecretException
    {
        newServer_async(__cb, null);
    }

    /**
     * Remove a callback.
     * 
     * @param __cb The callback object for the operation.
     * @param cb Callback interface to be removed.
     **/
    public final void
    removeCallback_async(AMD_Meta_removeCallback __cb, MetaCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException
    {
        removeCallback_async(__cb, cb, null);
    }

    public static Ice.DispatchStatus
    ___getServer(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        int id;
        id = __is.readInt();
        __is.endReadEncaps();
        AMD_Meta_getServer __cb = new _AMD_Meta_getServer(__inS);
        try
        {
            __obj.getServer_async(__cb, id, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___newServer(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_newServer __cb = new _AMD_Meta_newServer(__inS);
        try
        {
            __obj.newServer_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getBootedServers(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_getBootedServers __cb = new _AMD_Meta_getBootedServers(__inS);
        try
        {
            __obj.getBootedServers_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getAllServers(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_getAllServers __cb = new _AMD_Meta_getAllServers(__inS);
        try
        {
            __obj.getAllServers_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getDefaultConf(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_getDefaultConf __cb = new _AMD_Meta_getDefaultConf(__inS);
        try
        {
            __obj.getDefaultConf_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getVersion(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_getVersion __cb = new _AMD_Meta_getVersion(__inS);
        try
        {
            __obj.getVersion_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___addCallback(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        MetaCallbackPrx cb;
        cb = MetaCallbackPrxHelper.__read(__is);
        __is.endReadEncaps();
        AMD_Meta_addCallback __cb = new _AMD_Meta_addCallback(__inS);
        try
        {
            __obj.addCallback_async(__cb, cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___removeCallback(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        MetaCallbackPrx cb;
        cb = MetaCallbackPrxHelper.__read(__is);
        __is.endReadEncaps();
        AMD_Meta_removeCallback __cb = new _AMD_Meta_removeCallback(__inS);
        try
        {
            __obj.removeCallback_async(__cb, cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getUptime(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_getUptime __cb = new _AMD_Meta_getUptime(__inS);
        try
        {
            __obj.getUptime_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getSlice(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_getSlice __cb = new _AMD_Meta_getSlice(__inS);
        try
        {
            __obj.getSlice_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus
    ___getSliceChecksums(Meta __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Idempotent, __current.mode);
        __inS.is().skipEmptyEncaps();
        AMD_Meta_getSliceChecksums __cb = new _AMD_Meta_getSliceChecksums(__inS);
        try
        {
            __obj.getSliceChecksums_async(__cb, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "addCallback",
        "getAllServers",
        "getBootedServers",
        "getDefaultConf",
        "getServer",
        "getSlice",
        "getSliceChecksums",
        "getUptime",
        "getVersion",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "newServer",
        "removeCallback"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___addCallback(this, in, __current);
            }
            case 1:
            {
                return ___getAllServers(this, in, __current);
            }
            case 2:
            {
                return ___getBootedServers(this, in, __current);
            }
            case 3:
            {
                return ___getDefaultConf(this, in, __current);
            }
            case 4:
            {
                return ___getServer(this, in, __current);
            }
            case 5:
            {
                return ___getSlice(this, in, __current);
            }
            case 6:
            {
                return ___getSliceChecksums(this, in, __current);
            }
            case 7:
            {
                return ___getUptime(this, in, __current);
            }
            case 8:
            {
                return ___getVersion(this, in, __current);
            }
            case 9:
            {
                return ___ice_id(this, in, __current);
            }
            case 10:
            {
                return ___ice_ids(this, in, __current);
            }
            case 11:
            {
                return ___ice_isA(this, in, __current);
            }
            case 12:
            {
                return ___ice_ping(this, in, __current);
            }
            case 13:
            {
                return ___newServer(this, in, __current);
            }
            case 14:
            {
                return ___removeCallback(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Murmur::Meta was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type Murmur::Meta was not generated with stream support";
        throw ex;
    }
}
