// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Group.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * A group. Groups are defined per channel, and can inherit members from parent channels.
 **/
public class Group implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * Group name
     **/
    public String name;

    /**
     * Is this group inherited from a parent channel? Read-only.
     **/
    public boolean inherited;

    /**
     * Does this group inherit members from parent channels?
     **/
    public boolean inherit;

    /**
     * Can subchannels inherit members from this group?
     **/
    public boolean inheritable;

    /**
     * List of users to add to the group.
     **/
    public int[] add;

    /**
     * List of inherited users to remove from the group.
     **/
    public int[] remove;

    /**
     * Current members of the group, including inherited members. Read-only.
     **/
    public int[] members;

    public Group()
    {
    }

    public Group(String name, boolean inherited, boolean inherit, boolean inheritable, int[] add, int[] remove, int[] members)
    {
        this.name = name;
        this.inherited = inherited;
        this.inherit = inherit;
        this.inheritable = inheritable;
        this.add = add;
        this.remove = remove;
        this.members = members;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Group _r = null;
        try
        {
            _r = (Group)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(inherited != _r.inherited)
            {
                return false;
            }
            if(inherit != _r.inherit)
            {
                return false;
            }
            if(inheritable != _r.inheritable)
            {
                return false;
            }
            if(!java.util.Arrays.equals(add, _r.add))
            {
                return false;
            }
            if(!java.util.Arrays.equals(remove, _r.remove))
            {
                return false;
            }
            if(!java.util.Arrays.equals(members, _r.members))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(name != null)
        {
            __h = 5 * __h + name.hashCode();
        }
        __h = 5 * __h + (inherited ? 1 : 0);
        __h = 5 * __h + (inherit ? 1 : 0);
        __h = 5 * __h + (inheritable ? 1 : 0);
        if(add != null)
        {
            for(int __i0 = 0; __i0 < add.length; __i0++)
            {
                __h = 5 * __h + add[__i0];
            }
        }
        if(remove != null)
        {
            for(int __i1 = 0; __i1 < remove.length; __i1++)
            {
                __h = 5 * __h + remove[__i1];
            }
        }
        if(members != null)
        {
            for(int __i2 = 0; __i2 < members.length; __i2++)
            {
                __h = 5 * __h + members[__i2];
            }
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(name);
        __os.writeBool(inherited);
        __os.writeBool(inherit);
        __os.writeBool(inheritable);
        IntListHelper.write(__os, add);
        IntListHelper.write(__os, remove);
        IntListHelper.write(__os, members);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        name = __is.readString();
        inherited = __is.readBool();
        inherit = __is.readBool();
        inheritable = __is.readBool();
        add = IntListHelper.read(__is);
        remove = IntListHelper.read(__is);
        members = IntListHelper.read(__is);
    }
}
