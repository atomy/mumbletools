// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ServerCallbackPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * Callback interface for servers. You can supply an implementation of this to receive notification
 * messages from the server.
 * If an added callback ever throws an exception or goes away, it will be automatically removed.
 * Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
 * complete before continuing processing.
 * Note that callbacks are removed when a server is stopped, so you should have a callback for
 * {@link MetaCallback.started} which calls {@link Server.addCallback}.
 * @see MetaCallback
 * @see Server.addCallback
 **/
public final class ServerCallbackPrxHelper extends Ice.ObjectPrxHelperBase implements ServerCallbackPrx
{
    /**
     * Called when a new channel is created. 
     * @param state State of new channel.
     **/
    public void
    channelCreated(Channel state)
    {
        channelCreated(state, null, false);
    }

    /**
     * Called when a new channel is created. 
     * @param state State of new channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    channelCreated(Channel state, java.util.Map<String, String> __ctx)
    {
        channelCreated(state, __ctx, true);
    }

    private void
    channelCreated(Channel state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerCallbackDel __del = (_ServerCallbackDel)__delBase;
                __del.channelCreated(state, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __channelCreated_name = "channelCreated";

    /**
     * Called when a new channel is created. 
     * @param __cb The callback object for the operation.
     * @param state State of new channel.
     **/
    public Ice.AsyncResult begin_channelCreated(Channel state)
    {
        return begin_channelCreated(state, null, false, null);
    }

    /**
     * Called when a new channel is created. 
     * @param __cb The callback object for the operation.
     * @param state State of new channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelCreated(Channel state, java.util.Map<String, String> __ctx)
    {
        return begin_channelCreated(state, __ctx, true, null);
    }

    /**
     * Called when a new channel is created. 
     * @param __cb The callback object for the operation.
     * @param state State of new channel.
     **/
    public Ice.AsyncResult begin_channelCreated(Channel state, Ice.Callback __cb)
    {
        return begin_channelCreated(state, null, false, __cb);
    }

    /**
     * Called when a new channel is created. 
     * @param __cb The callback object for the operation.
     * @param state State of new channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelCreated(Channel state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_channelCreated(state, __ctx, true, __cb);
    }

    /**
     * Called when a new channel is created. 
     * @param __cb The callback object for the operation.
     * @param state State of new channel.
     **/
    public Ice.AsyncResult begin_channelCreated(Channel state, Callback_ServerCallback_channelCreated __cb)
    {
        return begin_channelCreated(state, null, false, __cb);
    }

    /**
     * Called when a new channel is created. 
     * @param __cb The callback object for the operation.
     * @param state State of new channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelCreated(Channel state, java.util.Map<String, String> __ctx, Callback_ServerCallback_channelCreated __cb)
    {
        return begin_channelCreated(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_channelCreated(Channel state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __channelCreated_name, __cb);
        try
        {
            __result.__prepare(__channelCreated_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_channelCreated(Ice.AsyncResult __result)
    {
        __end(__result, __channelCreated_name);
    }

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param state State of removed channel.
     **/
    public void
    channelRemoved(Channel state)
    {
        channelRemoved(state, null, false);
    }

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param state State of removed channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    channelRemoved(Channel state, java.util.Map<String, String> __ctx)
    {
        channelRemoved(state, __ctx, true);
    }

    private void
    channelRemoved(Channel state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerCallbackDel __del = (_ServerCallbackDel)__delBase;
                __del.channelRemoved(state, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __channelRemoved_name = "channelRemoved";

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param __cb The callback object for the operation.
     * @param state State of removed channel.
     **/
    public Ice.AsyncResult begin_channelRemoved(Channel state)
    {
        return begin_channelRemoved(state, null, false, null);
    }

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param __cb The callback object for the operation.
     * @param state State of removed channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelRemoved(Channel state, java.util.Map<String, String> __ctx)
    {
        return begin_channelRemoved(state, __ctx, true, null);
    }

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param __cb The callback object for the operation.
     * @param state State of removed channel.
     **/
    public Ice.AsyncResult begin_channelRemoved(Channel state, Ice.Callback __cb)
    {
        return begin_channelRemoved(state, null, false, __cb);
    }

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param __cb The callback object for the operation.
     * @param state State of removed channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelRemoved(Channel state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_channelRemoved(state, __ctx, true, __cb);
    }

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param __cb The callback object for the operation.
     * @param state State of removed channel.
     **/
    public Ice.AsyncResult begin_channelRemoved(Channel state, Callback_ServerCallback_channelRemoved __cb)
    {
        return begin_channelRemoved(state, null, false, __cb);
    }

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param __cb The callback object for the operation.
     * @param state State of removed channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelRemoved(Channel state, java.util.Map<String, String> __ctx, Callback_ServerCallback_channelRemoved __cb)
    {
        return begin_channelRemoved(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_channelRemoved(Channel state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __channelRemoved_name, __cb);
        try
        {
            __result.__prepare(__channelRemoved_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_channelRemoved(Ice.AsyncResult __result)
    {
        __end(__result, __channelRemoved_name);
    }

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param state New state of channel.
     **/
    public void
    channelStateChanged(Channel state)
    {
        channelStateChanged(state, null, false);
    }

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param state New state of channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    channelStateChanged(Channel state, java.util.Map<String, String> __ctx)
    {
        channelStateChanged(state, __ctx, true);
    }

    private void
    channelStateChanged(Channel state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerCallbackDel __del = (_ServerCallbackDel)__delBase;
                __del.channelStateChanged(state, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __channelStateChanged_name = "channelStateChanged";

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param __cb The callback object for the operation.
     * @param state New state of channel.
     **/
    public Ice.AsyncResult begin_channelStateChanged(Channel state)
    {
        return begin_channelStateChanged(state, null, false, null);
    }

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param __cb The callback object for the operation.
     * @param state New state of channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelStateChanged(Channel state, java.util.Map<String, String> __ctx)
    {
        return begin_channelStateChanged(state, __ctx, true, null);
    }

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param __cb The callback object for the operation.
     * @param state New state of channel.
     **/
    public Ice.AsyncResult begin_channelStateChanged(Channel state, Ice.Callback __cb)
    {
        return begin_channelStateChanged(state, null, false, __cb);
    }

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param __cb The callback object for the operation.
     * @param state New state of channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelStateChanged(Channel state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_channelStateChanged(state, __ctx, true, __cb);
    }

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param __cb The callback object for the operation.
     * @param state New state of channel.
     **/
    public Ice.AsyncResult begin_channelStateChanged(Channel state, Callback_ServerCallback_channelStateChanged __cb)
    {
        return begin_channelStateChanged(state, null, false, __cb);
    }

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param __cb The callback object for the operation.
     * @param state New state of channel.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_channelStateChanged(Channel state, java.util.Map<String, String> __ctx, Callback_ServerCallback_channelStateChanged __cb)
    {
        return begin_channelStateChanged(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_channelStateChanged(Channel state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __channelStateChanged_name, __cb);
        try
        {
            __result.__prepare(__channelStateChanged_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_channelStateChanged(Ice.AsyncResult __result)
    {
        __end(__result, __channelStateChanged_name);
    }

    /**
     * Called when a user connects to the server. 
     * @param state State of connected user.
     **/
    public void
    userConnected(User state)
    {
        userConnected(state, null, false);
    }

    /**
     * Called when a user connects to the server. 
     * @param state State of connected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    userConnected(User state, java.util.Map<String, String> __ctx)
    {
        userConnected(state, __ctx, true);
    }

    private void
    userConnected(User state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerCallbackDel __del = (_ServerCallbackDel)__delBase;
                __del.userConnected(state, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __userConnected_name = "userConnected";

    /**
     * Called when a user connects to the server. 
     * @param __cb The callback object for the operation.
     * @param state State of connected user.
     **/
    public Ice.AsyncResult begin_userConnected(User state)
    {
        return begin_userConnected(state, null, false, null);
    }

    /**
     * Called when a user connects to the server. 
     * @param __cb The callback object for the operation.
     * @param state State of connected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userConnected(User state, java.util.Map<String, String> __ctx)
    {
        return begin_userConnected(state, __ctx, true, null);
    }

    /**
     * Called when a user connects to the server. 
     * @param __cb The callback object for the operation.
     * @param state State of connected user.
     **/
    public Ice.AsyncResult begin_userConnected(User state, Ice.Callback __cb)
    {
        return begin_userConnected(state, null, false, __cb);
    }

    /**
     * Called when a user connects to the server. 
     * @param __cb The callback object for the operation.
     * @param state State of connected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userConnected(User state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_userConnected(state, __ctx, true, __cb);
    }

    /**
     * Called when a user connects to the server. 
     * @param __cb The callback object for the operation.
     * @param state State of connected user.
     **/
    public Ice.AsyncResult begin_userConnected(User state, Callback_ServerCallback_userConnected __cb)
    {
        return begin_userConnected(state, null, false, __cb);
    }

    /**
     * Called when a user connects to the server. 
     * @param __cb The callback object for the operation.
     * @param state State of connected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userConnected(User state, java.util.Map<String, String> __ctx, Callback_ServerCallback_userConnected __cb)
    {
        return begin_userConnected(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_userConnected(User state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __userConnected_name, __cb);
        try
        {
            __result.__prepare(__userConnected_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_userConnected(Ice.AsyncResult __result)
    {
        __end(__result, __userConnected_name);
    }

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param state State of disconnected user.
     **/
    public void
    userDisconnected(User state)
    {
        userDisconnected(state, null, false);
    }

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param state State of disconnected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    userDisconnected(User state, java.util.Map<String, String> __ctx)
    {
        userDisconnected(state, __ctx, true);
    }

    private void
    userDisconnected(User state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerCallbackDel __del = (_ServerCallbackDel)__delBase;
                __del.userDisconnected(state, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __userDisconnected_name = "userDisconnected";

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param __cb The callback object for the operation.
     * @param state State of disconnected user.
     **/
    public Ice.AsyncResult begin_userDisconnected(User state)
    {
        return begin_userDisconnected(state, null, false, null);
    }

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param __cb The callback object for the operation.
     * @param state State of disconnected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userDisconnected(User state, java.util.Map<String, String> __ctx)
    {
        return begin_userDisconnected(state, __ctx, true, null);
    }

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param __cb The callback object for the operation.
     * @param state State of disconnected user.
     **/
    public Ice.AsyncResult begin_userDisconnected(User state, Ice.Callback __cb)
    {
        return begin_userDisconnected(state, null, false, __cb);
    }

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param __cb The callback object for the operation.
     * @param state State of disconnected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userDisconnected(User state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_userDisconnected(state, __ctx, true, __cb);
    }

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param __cb The callback object for the operation.
     * @param state State of disconnected user.
     **/
    public Ice.AsyncResult begin_userDisconnected(User state, Callback_ServerCallback_userDisconnected __cb)
    {
        return begin_userDisconnected(state, null, false, __cb);
    }

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param __cb The callback object for the operation.
     * @param state State of disconnected user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userDisconnected(User state, java.util.Map<String, String> __ctx, Callback_ServerCallback_userDisconnected __cb)
    {
        return begin_userDisconnected(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_userDisconnected(User state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __userDisconnected_name, __cb);
        try
        {
            __result.__prepare(__userDisconnected_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_userDisconnected(Ice.AsyncResult __result)
    {
        __end(__result, __userDisconnected_name);
    }

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param state New state of user.
     **/
    public void
    userStateChanged(User state)
    {
        userStateChanged(state, null, false);
    }

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param state New state of user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    userStateChanged(User state, java.util.Map<String, String> __ctx)
    {
        userStateChanged(state, __ctx, true);
    }

    private void
    userStateChanged(User state, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _ServerCallbackDel __del = (_ServerCallbackDel)__delBase;
                __del.userStateChanged(state, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __userStateChanged_name = "userStateChanged";

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param __cb The callback object for the operation.
     * @param state New state of user.
     **/
    public Ice.AsyncResult begin_userStateChanged(User state)
    {
        return begin_userStateChanged(state, null, false, null);
    }

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param __cb The callback object for the operation.
     * @param state New state of user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userStateChanged(User state, java.util.Map<String, String> __ctx)
    {
        return begin_userStateChanged(state, __ctx, true, null);
    }

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param __cb The callback object for the operation.
     * @param state New state of user.
     **/
    public Ice.AsyncResult begin_userStateChanged(User state, Ice.Callback __cb)
    {
        return begin_userStateChanged(state, null, false, __cb);
    }

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param __cb The callback object for the operation.
     * @param state New state of user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userStateChanged(User state, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_userStateChanged(state, __ctx, true, __cb);
    }

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param __cb The callback object for the operation.
     * @param state New state of user.
     **/
    public Ice.AsyncResult begin_userStateChanged(User state, Callback_ServerCallback_userStateChanged __cb)
    {
        return begin_userStateChanged(state, null, false, __cb);
    }

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param __cb The callback object for the operation.
     * @param state New state of user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_userStateChanged(User state, java.util.Map<String, String> __ctx, Callback_ServerCallback_userStateChanged __cb)
    {
        return begin_userStateChanged(state, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_userStateChanged(User state, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __userStateChanged_name, __cb);
        try
        {
            __result.__prepare(__userStateChanged_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            state.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_userStateChanged(Ice.AsyncResult __result)
    {
        __end(__result, __userStateChanged_name);
    }

    public static ServerCallbackPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ServerCallbackPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerCallbackPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ServerCallbackPrxHelper __h = new ServerCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerCallbackPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ServerCallbackPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerCallbackPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ServerCallbackPrxHelper __h = new ServerCallbackPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerCallbackPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ServerCallbackPrxHelper __h = new ServerCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerCallbackPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ServerCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ServerCallbackPrxHelper __h = new ServerCallbackPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerCallbackPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ServerCallbackPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerCallbackPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ServerCallbackPrxHelper __h = new ServerCallbackPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ServerCallbackPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerCallbackPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ServerCallbackPrxHelper __h = new ServerCallbackPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Murmur::ServerCallback"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ServerCallbackDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ServerCallbackDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ServerCallbackPrx v)
    {
        __os.writeProxy(v);
    }

    public static ServerCallbackPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ServerCallbackPrxHelper result = new ServerCallbackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
