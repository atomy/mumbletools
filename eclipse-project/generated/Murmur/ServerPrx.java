// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ServerPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * Per-server interface. This includes all methods for configuring and altering
 * the state of a single virtual server. You can retrieve a pointer to this interface
 * from one of the methods in {@link Meta}.
 **/
public interface ServerPrx extends Ice.ObjectPrx
{
    /**
     * Shows if the server currently running (accepting users).
     * 
     * @return Run-state of server.
     **/
    public boolean isRunning()
        throws InvalidSecretException;

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return Run-state of server.
     **/
    public boolean isRunning(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isRunning();

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isRunning(java.util.Map<String, String> __ctx);

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isRunning(Ice.Callback __cb);

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isRunning(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isRunning(Callback_Server_isRunning __cb);

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_isRunning(java.util.Map<String, String> __ctx, Callback_Server_isRunning __cb);

    /**
     * Shows if the server currently running (accepting users).
     * 
     * @param __result The asynchronous result object.
     * @return Run-state of server.
     **/
    public boolean end_isRunning(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Start server.
     **/
    public void start()
        throws InvalidSecretException,
               ServerBootedException,
               ServerFailureException;

    /**
     * Start server.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void start(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException,
               ServerFailureException;

    /**
     * Start server.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start();

    /**
     * Start server.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx);

    /**
     * Start server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(Ice.Callback __cb);

    /**
     * Start server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Start server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(Callback_Server_start __cb);

    /**
     * Start server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Callback_Server_start __cb);

    /**
     * Start server.
     * @param __result The asynchronous result object.
     **/
    public void end_start(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException,
               ServerFailureException;

    /**
     * Stop server.
     **/
    public void stop()
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Stop server.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void stop(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Stop server.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop();

    /**
     * Stop server.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx);

    /**
     * Stop server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(Ice.Callback __cb);

    /**
     * Stop server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Stop server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(Callback_Server_stop __cb);

    /**
     * Stop server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Callback_Server_stop __cb);

    /**
     * Stop server.
     * @param __result The asynchronous result object.
     **/
    public void end_stop(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Delete server and all it's configuration.
     **/
    public void delete()
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Delete server and all it's configuration.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void delete(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Delete server and all it's configuration.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_delete();

    /**
     * Delete server and all it's configuration.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_delete(java.util.Map<String, String> __ctx);

    /**
     * Delete server and all it's configuration.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_delete(Ice.Callback __cb);

    /**
     * Delete server and all it's configuration.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_delete(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Delete server and all it's configuration.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_delete(Callback_Server_delete __cb);

    /**
     * Delete server and all it's configuration.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_delete(java.util.Map<String, String> __ctx, Callback_Server_delete __cb);

    /**
     * Delete server and all it's configuration.
     * @param __result The asynchronous result object.
     **/
    public void end_delete(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch the server id.
     * 
     * @return Unique server id.
     **/
    public int id()
        throws InvalidSecretException;

    /**
     * Fetch the server id.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return Unique server id.
     **/
    public int id(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Fetch the server id.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_id();

    /**
     * Fetch the server id.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_id(java.util.Map<String, String> __ctx);

    /**
     * Fetch the server id.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_id(Ice.Callback __cb);

    /**
     * Fetch the server id.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_id(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch the server id.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_id(Callback_Server_id __cb);

    /**
     * Fetch the server id.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_id(java.util.Map<String, String> __ctx, Callback_Server_id __cb);

    /**
     * Fetch the server id.
     * 
     * @param __result The asynchronous result object.
     * @return Unique server id.
     **/
    public int end_id(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @see removeCallback
     **/
    public void addCallback(ServerCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @see removeCallback
     * @param __ctx The Context map to send with the invocation.
     **/
    public void addCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(ServerCallbackPrx cb);

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx);

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(ServerCallbackPrx cb, Ice.Callback __cb);

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(ServerCallbackPrx cb, Callback_Server_addCallback __cb);

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Server_addCallback __cb);

    /**
     * Add a callback. The callback will receive notifications about changes to users and channels.
     * 
     * @param __result The asynchronous result object.
     * @see removeCallback
     **/
    public void end_addCallback(Ice.AsyncResult __result)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @see addCallback
     **/
    public void removeCallback(ServerCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @see addCallback
     * @param __ctx The Context map to send with the invocation.
     **/
    public void removeCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(ServerCallbackPrx cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(ServerCallbackPrx cb, Ice.Callback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(ServerCallbackPrx cb, Callback_Server_removeCallback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(ServerCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Server_removeCallback __cb);

    /**
     * Remove a callback.
     * 
     * @param __result The asynchronous result object.
     * @see addCallback
     **/
    public void end_removeCallback(Ice.AsyncResult __result)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     **/
    public void setAuthenticator(ServerAuthenticatorPrx auth)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setAuthenticator(ServerAuthenticatorPrx auth, java.util.Map<String, String> __ctx)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthenticator(ServerAuthenticatorPrx auth);

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthenticator(ServerAuthenticatorPrx auth, java.util.Map<String, String> __ctx);

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthenticator(ServerAuthenticatorPrx auth, Ice.Callback __cb);

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthenticator(ServerAuthenticatorPrx auth, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthenticator(ServerAuthenticatorPrx auth, Callback_Server_setAuthenticator __cb);

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param auth Authenticator object to perform subsequent authentications.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setAuthenticator(ServerAuthenticatorPrx auth, java.util.Map<String, String> __ctx, Callback_Server_setAuthenticator __cb);

    /**
     * Set external authenticator. If set, all authentications from clients are forwarded to this
     * proxy.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_setAuthenticator(Ice.AsyncResult __result)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @return Configuration value. If this is empty, see {@link Meta.getDefaultConf}
     **/
    public String getConf(String key)
        throws InvalidSecretException;

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @param __ctx The Context map to send with the invocation.
     * @return Configuration value. If this is empty, see {@link Meta.getDefaultConf}
     **/
    public String getConf(String key, java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConf(String key);

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConf(String key, java.util.Map<String, String> __ctx);

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConf(String key, Ice.Callback __cb);

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConf(String key, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConf(String key, Callback_Server_getConf __cb);

    /**
     * Retrieve configuration item.
     * @param key Configuration key.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getConf(String key, java.util.Map<String, String> __ctx, Callback_Server_getConf __cb);

    /**
     * Retrieve configuration item.
     * @param __result The asynchronous result object.
     * @return Configuration value. If this is empty, see {@link Meta.getDefaultConf}
     **/
    public String end_getConf(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Retrieve all configuration items.
     * @return All configured values. If a value isn't set here, the value from {@link Meta.getDefaultConf} is used.
     **/
    public java.util.Map<java.lang.String, java.lang.String> getAllConf()
        throws InvalidSecretException;

    /**
     * Retrieve all configuration items.
     * @param __ctx The Context map to send with the invocation.
     * @return All configured values. If a value isn't set here, the value from {@link Meta.getDefaultConf} is used.
     **/
    public java.util.Map<java.lang.String, java.lang.String> getAllConf(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Retrieve all configuration items.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllConf();

    /**
     * Retrieve all configuration items.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllConf(java.util.Map<String, String> __ctx);

    /**
     * Retrieve all configuration items.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllConf(Ice.Callback __cb);

    /**
     * Retrieve all configuration items.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllConf(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Retrieve all configuration items.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllConf(Callback_Server_getAllConf __cb);

    /**
     * Retrieve all configuration items.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllConf(java.util.Map<String, String> __ctx, Callback_Server_getAllConf __cb);

    /**
     * Retrieve all configuration items.
     * @param __result The asynchronous result object.
     * @return All configured values. If a value isn't set here, the value from {@link Meta.getDefaultConf} is used.
     **/
    public java.util.Map<java.lang.String, java.lang.String> end_getAllConf(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @param value Configuration value.
     **/
    public void setConf(String key, String value)
        throws InvalidSecretException;

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @param value Configuration value.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setConf(String key, String value, java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConf(String key, String value);

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConf(String key, String value, java.util.Map<String, String> __ctx);

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConf(String key, String value, Ice.Callback __cb);

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConf(String key, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConf(String key, String value, Callback_Server_setConf __cb);

    /**
     * Set a configuration item.
     * @param key Configuration key.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConf(String key, String value, java.util.Map<String, String> __ctx, Callback_Server_setConf __cb);

    /**
     * Set a configuration item.
     * @param __result The asynchronous result object.
     **/
    public void end_setConf(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     **/
    public void setSuperuserPassword(String pw)
        throws InvalidSecretException;

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setSuperuserPassword(String pw, java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSuperuserPassword(String pw);

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSuperuserPassword(String pw, java.util.Map<String, String> __ctx);

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSuperuserPassword(String pw, Ice.Callback __cb);

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSuperuserPassword(String pw, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSuperuserPassword(String pw, Callback_Server_setSuperuserPassword __cb);

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param pw Password.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setSuperuserPassword(String pw, java.util.Map<String, String> __ctx, Callback_Server_setSuperuserPassword __cb);

    /**
     * Set superuser password. This is just a convenience for using {@link updateRegistration} on user id 0.
     * @param __result The asynchronous result object.
     **/
    public void end_setSuperuserPassword(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @param last Last entry to fetch.
     * @return List of log entries.
     **/
    public LogEntry[] getLog(int first, int last)
        throws InvalidSecretException;

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @param last Last entry to fetch.
     * @param __ctx The Context map to send with the invocation.
     * @return List of log entries.
     **/
    public LogEntry[] getLog(int first, int last, java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLog(int first, int last);

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLog(int first, int last, java.util.Map<String, String> __ctx);

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLog(int first, int last, Ice.Callback __cb);

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLog(int first, int last, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLog(int first, int last, Callback_Server_getLog __cb);

    /**
     * Fetch log entries.
     * @param first Lowest numbered entry to fetch. 0 is the most recent item.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLog(int first, int last, java.util.Map<String, String> __ctx, Callback_Server_getLog __cb);

    /**
     * Fetch log entries.
     * @param __result The asynchronous result object.
     * @return List of log entries.
     **/
    public LogEntry[] end_getLog(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Fetch length of log
     * @return Number of entries in log
     **/
    public int getLogLen()
        throws InvalidSecretException;

    /**
     * Fetch length of log
     * @param __ctx The Context map to send with the invocation.
     * @return Number of entries in log
     **/
    public int getLogLen(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Fetch length of log
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLogLen();

    /**
     * Fetch length of log
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLogLen(java.util.Map<String, String> __ctx);

    /**
     * Fetch length of log
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLogLen(Ice.Callback __cb);

    /**
     * Fetch length of log
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLogLen(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch length of log
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLogLen(Callback_Server_getLogLen __cb);

    /**
     * Fetch length of log
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLogLen(java.util.Map<String, String> __ctx, Callback_Server_getLogLen __cb);

    /**
     * Fetch length of log
     * @param __result The asynchronous result object.
     * @return Number of entries in log
     **/
    public int end_getLogLen(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @return List of connected users.
     * @see getState
     **/
    public java.util.Map<java.lang.Integer, User> getUsers()
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __ctx The Context map to send with the invocation.
     * @return List of connected users.
     * @see getState
     **/
    public java.util.Map<java.lang.Integer, User> getUsers(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUsers();

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUsers(java.util.Map<String, String> __ctx);

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUsers(Ice.Callback __cb);

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUsers(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUsers(Callback_Server_getUsers __cb);

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUsers(java.util.Map<String, String> __ctx, Callback_Server_getUsers __cb);

    /**
     * Fetch all users. This returns all currently connected users on the server.
     * @param __result The asynchronous result object.
     * @return List of connected users.
     * @see getState
     **/
    public java.util.Map<java.lang.Integer, User> end_getUsers(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @return List of defined channels.
     * @see getChannelState
     **/
    public java.util.Map<java.lang.Integer, Channel> getChannels()
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __ctx The Context map to send with the invocation.
     * @return List of defined channels.
     * @see getChannelState
     **/
    public java.util.Map<java.lang.Integer, Channel> getChannels(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannels();

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannels(java.util.Map<String, String> __ctx);

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannels(Ice.Callback __cb);

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannels(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannels(Callback_Server_getChannels __cb);

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannels(java.util.Map<String, String> __ctx, Callback_Server_getChannels __cb);

    /**
     * Fetch all channels. This returns all defined channels on the server. The root channel is always channel 0.
     * @param __result The asynchronous result object.
     * @return List of defined channels.
     * @see getChannelState
     **/
    public java.util.Map<java.lang.Integer, Channel> end_getChannels(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @return Certificate list of user.
     **/
    public byte[][] getCertificateList(int session)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @return Certificate list of user.
     **/
    public byte[][] getCertificateList(int session, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCertificateList(int session);

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCertificateList(int session, java.util.Map<String, String> __ctx);

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCertificateList(int session, Ice.Callback __cb);

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCertificateList(int session, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCertificateList(int session, Callback_Server_getCertificateList __cb);

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCertificateList(int session, java.util.Map<String, String> __ctx, Callback_Server_getCertificateList __cb);

    /**
     * Fetch certificate of user. This returns the complete certificate chain of a user.
     * @param __result The asynchronous result object.
     * @return Certificate list of user.
     **/
    public byte[][] end_getCertificateList(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @return Recursive tree of all channels and connected users.
     **/
    public Tree getTree()
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __ctx The Context map to send with the invocation.
     * @return Recursive tree of all channels and connected users.
     **/
    public Tree getTree(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTree();

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTree(java.util.Map<String, String> __ctx);

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTree(Ice.Callback __cb);

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTree(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTree(Callback_Server_getTree __cb);

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTree(java.util.Map<String, String> __ctx, Callback_Server_getTree __cb);

    /**
     * Fetch all channels and connected users as a tree. This retrieves an easy-to-use representation of the server
     * as a tree. This is primarily used for viewing the state of the server on a webpage.
     * @param __result The asynchronous result object.
     * @return Recursive tree of all channels and connected users.
     **/
    public Tree end_getTree(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all current IP bans on the server.
     * @return List of bans.
     **/
    public Ban[] getBans()
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all current IP bans on the server.
     * @param __ctx The Context map to send with the invocation.
     * @return List of bans.
     **/
    public Ban[] getBans(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch all current IP bans on the server.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBans();

    /**
     * Fetch all current IP bans on the server.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBans(java.util.Map<String, String> __ctx);

    /**
     * Fetch all current IP bans on the server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBans(Ice.Callback __cb);

    /**
     * Fetch all current IP bans on the server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBans(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch all current IP bans on the server.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBans(Callback_Server_getBans __cb);

    /**
     * Fetch all current IP bans on the server.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBans(java.util.Map<String, String> __ctx, Callback_Server_getBans __cb);

    /**
     * Fetch all current IP bans on the server.
     * @param __result The asynchronous result object.
     * @return List of bans.
     **/
    public Ban[] end_getBans(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     **/
    public void setBans(Ban[] bans)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setBans(Ban[] bans, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setBans(Ban[] bans);

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setBans(Ban[] bans, java.util.Map<String, String> __ctx);

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setBans(Ban[] bans, Ice.Callback __cb);

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setBans(Ban[] bans, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setBans(Ban[] bans, Callback_Server_setBans __cb);

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param bans List of bans.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setBans(Ban[] bans, java.util.Map<String, String> __ctx, Callback_Server_setBans __cb);

    /**
     * Set all current IP bans on the server. This will replace any bans already present, so if you want to add a ban, be sure to call {@link getBans} and then
     * append to the returned list before calling this method.
     * @param __result The asynchronous result object.
     **/
    public void end_setBans(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @param reason Text message to show when user is kicked.
     **/
    public void kickUser(int session, String reason)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @param reason Text message to show when user is kicked.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void kickUser(int session, String reason, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kickUser(int session, String reason);

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kickUser(int session, String reason, java.util.Map<String, String> __ctx);

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kickUser(int session, String reason, Ice.Callback __cb);

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kickUser(int session, String reason, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kickUser(int session, String reason, Callback_Server_kickUser __cb);

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_kickUser(int session, String reason, java.util.Map<String, String> __ctx, Callback_Server_kickUser __cb);

    /**
     * Kick a user. The user is not banned, and is free to rejoin the server.
     * @param __result The asynchronous result object.
     **/
    public void end_kickUser(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @return State of connected user.
     * @see setState
     * @see getUsers
     **/
    public User getState(int session)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @return State of connected user.
     * @see setState
     * @see getUsers
     **/
    public User getState(int session, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(int session);

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(int session, java.util.Map<String, String> __ctx);

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(int session, Ice.Callback __cb);

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(int session, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(int session, Callback_Server_getState __cb);

    /**
     * Get state of a single connected user. 
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getState(int session, java.util.Map<String, String> __ctx, Callback_Server_getState __cb);

    /**
     * Get state of a single connected user. 
     * @param __result The asynchronous result object.
     * @return State of connected user.
     * @see setState
     * @see getUsers
     **/
    public User end_getState(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @see getState
     **/
    public void setState(User state)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @see getState
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setState(User state, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(User state);

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(User state, java.util.Map<String, String> __ctx);

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(User state, Ice.Callback __cb);

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(User state, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(User state, Callback_Server_setState __cb);

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param state User state to set.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setState(User state, java.util.Map<String, String> __ctx, Callback_Server_setState __cb);

    /**
     * Set user state. You can use this to move, mute and deafen users.
     * @param __result The asynchronous result object.
     * @see getState
     **/
    public void end_setState(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param text Message to send.
     * @see sendMessageChannel
     **/
    public void sendMessage(int session, String text)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param text Message to send.
     * @see sendMessageChannel
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendMessage(int session, String text, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessage(int session, String text);

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessage(int session, String text, java.util.Map<String, String> __ctx);

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessage(int session, String text, Ice.Callback __cb);

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessage(int session, String text, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessage(int session, String text, Callback_Server_sendMessage __cb);

    /**
     * Send text message to a single user.
     * @param session Connection ID of user. See {@link User.session}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessage(int session, String text, java.util.Map<String, String> __ctx, Callback_Server_sendMessage __cb);

    /**
     * Send text message to a single user.
     * @param __result The asynchronous result object.
     * @see sendMessageChannel
     **/
    public void end_sendMessage(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param perm Permission bits to check.
     * @return true if any of the permissions in perm were set for the user.
     **/
    public boolean hasPermission(int session, int channelid, int perm)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param perm Permission bits to check.
     * @param __ctx The Context map to send with the invocation.
     * @return true if any of the permissions in perm were set for the user.
     **/
    public boolean hasPermission(int session, int channelid, int perm, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param perm Permission bits to check.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm);

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param perm Permission bits to check.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, java.util.Map<String, String> __ctx);

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param perm Permission bits to check.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, Ice.Callback __cb);

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param perm Permission bits to check.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param perm Permission bits to check.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, Callback_Server_hasPermission __cb);

    /**
     * Check if user is permitted to perform action.
     * @param session Connection ID of user. See {@link User.session}.
     * @param perm Permission bits to check.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_hasPermission(int session, int channelid, int perm, java.util.Map<String, String> __ctx, Callback_Server_hasPermission __cb);

    /**
     * Check if user is permitted to perform action.
     * @param __result The asynchronous result object.
     * @return true if any of the permissions in perm were set for the user.
     **/
    public boolean end_hasPermission(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param action Action string, a unique name to associate with the action.
     * @param text Name of action shown to user.
     * @param cb Callback interface which will receive notifications.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @see removeContextCallback
     **/
    public void addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param action Action string, a unique name to associate with the action.
     * @param text Name of action shown to user.
     * @param cb Callback interface which will receive notifications.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @see removeContextCallback
     * @param __ctx The Context map to send with the invocation.
     **/
    public void addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx, java.util.Map<String, String> __ctx)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param text Name of action shown to user.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx);

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param text Name of action shown to user.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx, java.util.Map<String, String> __ctx);

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param text Name of action shown to user.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx, Ice.Callback __cb);

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param text Name of action shown to user.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param text Name of action shown to user.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx, Callback_Server_addContextCallback __cb);

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param session Session of user which should receive context entry.
     * @param text Name of action shown to user.
     * @param ctx Context this should be used in. Needs to be one or a combination of {@link ContextServer}, {@link ContextChannel} and {@link ContextUser}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addContextCallback(int session, String action, String text, ServerContextCallbackPrx cb, int ctx, java.util.Map<String, String> __ctx, Callback_Server_addContextCallback __cb);

    /**
     * Add a context callback. This is done per user, and will add a context menu action for the user.
     * 
     * @param __result The asynchronous result object.
     * @see removeContextCallback
     **/
    public void end_addContextCallback(Ice.AsyncResult __result)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @see addContextCallback
     **/
    public void removeContextCallback(ServerContextCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @see addContextCallback
     * @param __ctx The Context map to send with the invocation.
     **/
    public void removeContextCallback(ServerContextCallbackPrx cb, java.util.Map<String, String> __ctx)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeContextCallback(ServerContextCallbackPrx cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeContextCallback(ServerContextCallbackPrx cb, java.util.Map<String, String> __ctx);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeContextCallback(ServerContextCallbackPrx cb, Ice.Callback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeContextCallback(ServerContextCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeContextCallback(ServerContextCallbackPrx cb, Callback_Server_removeContextCallback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed. This callback will be removed from all from all users.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeContextCallback(ServerContextCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Server_removeContextCallback __cb);

    /**
     * Remove a callback.
     * 
     * @param __result The asynchronous result object.
     * @see addContextCallback
     **/
    public void end_removeContextCallback(Ice.AsyncResult __result)
        throws InvalidCallbackException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @return State of channel.
     * @see setChannelState
     * @see getChannels
     **/
    public Channel getChannelState(int channelid)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @return State of channel.
     * @see setChannelState
     * @see getChannels
     **/
    public Channel getChannelState(int channelid, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannelState(int channelid);

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannelState(int channelid, java.util.Map<String, String> __ctx);

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannelState(int channelid, Ice.Callback __cb);

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannelState(int channelid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannelState(int channelid, Callback_Server_getChannelState __cb);

    /**
     * Get state of single channel.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getChannelState(int channelid, java.util.Map<String, String> __ctx, Callback_Server_getChannelState __cb);

    /**
     * Get state of single channel.
     * @param __result The asynchronous result object.
     * @return State of channel.
     * @see setChannelState
     * @see getChannels
     **/
    public Channel end_getChannelState(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @see getChannelState
     **/
    public void setChannelState(Channel state)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @see getChannelState
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setChannelState(Channel state, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChannelState(Channel state);

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChannelState(Channel state, java.util.Map<String, String> __ctx);

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChannelState(Channel state, Ice.Callback __cb);

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChannelState(Channel state, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChannelState(Channel state, Callback_Server_setChannelState __cb);

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param state Channel state to set.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setChannelState(Channel state, java.util.Map<String, String> __ctx, Callback_Server_setChannelState __cb);

    /**
     * Set state of a single channel. You can use this to move or relink channels.
     * @param __result The asynchronous result object.
     * @see getChannelState
     **/
    public void end_setChannelState(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     **/
    public void removeChannel(int channelid)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void removeChannel(int channelid, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeChannel(int channelid);

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeChannel(int channelid, java.util.Map<String, String> __ctx);

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeChannel(int channelid, Ice.Callback __cb);

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeChannel(int channelid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeChannel(int channelid, Callback_Server_removeChannel __cb);

    /**
     * Remove a channel and all its subchannels.
     * @param channelid ID of Channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeChannel(int channelid, java.util.Map<String, String> __ctx, Callback_Server_removeChannel __cb);

    /**
     * Remove a channel and all its subchannels.
     * @param __result The asynchronous result object.
     **/
    public void end_removeChannel(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @param parent Channel ID of parent channel. See {@link Channel.id}.
     * @return ID of newly created channel.
     **/
    public int addChannel(String name, int parent)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @param parent Channel ID of parent channel. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @return ID of newly created channel.
     **/
    public int addChannel(String name, int parent, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addChannel(String name, int parent);

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addChannel(String name, int parent, java.util.Map<String, String> __ctx);

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addChannel(String name, int parent, Ice.Callback __cb);

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addChannel(String name, int parent, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addChannel(String name, int parent, Callback_Server_addChannel __cb);

    /**
     * Add a new channel.
     * @param name Name of new channel.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addChannel(String name, int parent, java.util.Map<String, String> __ctx, Callback_Server_addChannel __cb);

    /**
     * Add a new channel.
     * @param __result The asynchronous result object.
     * @return ID of newly created channel.
     **/
    public int end_addChannel(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param tree If true, the message will be sent to the channel and all its subchannels.
     * @param text Message to send.
     * @see sendMessage
     **/
    public void sendMessageChannel(int channelid, boolean tree, String text)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param tree If true, the message will be sent to the channel and all its subchannels.
     * @param text Message to send.
     * @see sendMessage
     * @param __ctx The Context map to send with the invocation.
     **/
    public void sendMessageChannel(int channelid, boolean tree, String text, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param text Message to send.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessageChannel(int channelid, boolean tree, String text);

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param text Message to send.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessageChannel(int channelid, boolean tree, String text, java.util.Map<String, String> __ctx);

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param text Message to send.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessageChannel(int channelid, boolean tree, String text, Ice.Callback __cb);

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param text Message to send.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessageChannel(int channelid, boolean tree, String text, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param text Message to send.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessageChannel(int channelid, boolean tree, String text, Callback_Server_sendMessageChannel __cb);

    /**
     * Send text message to channel or a tree of channels.
     * @param channelid Channel ID of channel to send to. See {@link Channel.id}.
     * @param text Message to send.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_sendMessageChannel(int channelid, boolean tree, String text, java.util.Map<String, String> __ctx, Callback_Server_sendMessageChannel __cb);

    /**
     * Send text message to channel or a tree of channels.
     * @param __result The asynchronous result object.
     * @see sendMessage
     **/
    public void end_sendMessageChannel(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param acls List of ACLs on the channel. This will include inherited ACLs.
     * @param groups List of groups on the channel. This will include inherited groups.
     * @param inherit Does this channel inherit ACLs from the parent channel?
     **/
    public void getACL(int channelid, ACLListHolder acls, GroupListHolder groups, Ice.BooleanHolder inherit)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param acls List of ACLs on the channel. This will include inherited ACLs.
     * @param groups List of groups on the channel. This will include inherited groups.
     * @param inherit Does this channel inherit ACLs from the parent channel?
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getACL(int channelid, ACLListHolder acls, GroupListHolder groups, Ice.BooleanHolder inherit, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getACL(int channelid);

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getACL(int channelid, java.util.Map<String, String> __ctx);

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getACL(int channelid, Ice.Callback __cb);

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getACL(int channelid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getACL(int channelid, Callback_Server_getACL __cb);

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getACL(int channelid, java.util.Map<String, String> __ctx, Callback_Server_getACL __cb);

    /**
     * Retrieve ACLs and Groups on a channel.
     * @param acls List of ACLs on the channel. This will include inherited ACLs.
     * @param inherit Does this channel inherit ACLs from the parent channel?
     * @param __result The asynchronous result object.
     **/
    public void end_getACL(ACLListHolder acls, GroupListHolder groups, Ice.BooleanHolder inherit, Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param acls List of ACLs on the channel.
     * @param groups List of groups on the channel.
     * @param inherit Should this channel inherit ACLs from the parent channel?
     **/
    public void setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param acls List of ACLs on the channel.
     * @param groups List of groups on the channel.
     * @param inherit Should this channel inherit ACLs from the parent channel?
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param groups List of groups on the channel.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit);

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param groups List of groups on the channel.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit, java.util.Map<String, String> __ctx);

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param groups List of groups on the channel.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit, Ice.Callback __cb);

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param groups List of groups on the channel.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param groups List of groups on the channel.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit, Callback_Server_setACL __cb);

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param channelid Channel ID of channel to fetch from. See {@link Channel.id}.
     * @param groups List of groups on the channel.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setACL(int channelid, ACL[] acls, Group[] groups, boolean inherit, java.util.Map<String, String> __ctx, Callback_Server_setACL __cb);

    /**
     * Set ACLs and Groups on a channel. Note that this will replace all existing ACLs and groups on the channel.
     * @param __result The asynchronous result object.
     **/
    public void end_setACL(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               ServerBootedException;

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param session Connection ID of user. See {@link User.session}.
     * @param group Group name to add to.
     **/
    public void addUserToGroup(int channelid, int session, String group)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param session Connection ID of user. See {@link User.session}.
     * @param group Group name to add to.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void addUserToGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to add to.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, String group);

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to add to.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx);

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to add to.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, String group, Ice.Callback __cb);

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to add to.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to add to.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, String group, Callback_Server_addUserToGroup __cb);

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to add to.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addUserToGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx, Callback_Server_addUserToGroup __cb);

    /**
     * Temporarily add a user to a group on a channel. This state is not saved, and is intended for temporary memberships.
     * @param __result The asynchronous result object.
     **/
    public void end_addUserToGroup(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param session Connection ID of user. See {@link User.session}.
     * @param group Group name to remove from.
     **/
    public void removeUserFromGroup(int channelid, int session, String group)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param session Connection ID of user. See {@link User.session}.
     * @param group Group name to remove from.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void removeUserFromGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to remove from.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, String group);

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to remove from.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx);

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to remove from.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, String group, Ice.Callback __cb);

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to remove from.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to remove from.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, String group, Callback_Server_removeUserFromGroup __cb);

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param channelid Channel ID of channel to add to. See {@link Channel.id}.
     * @param group Group name to remove from.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeUserFromGroup(int channelid, int session, String group, java.util.Map<String, String> __ctx, Callback_Server_removeUserFromGroup __cb);

    /**
     * Remove a user from a temporary group membership on a channel. This state is not saved, and is intended for temporary memberships.
     * @param __result The asynchronous result object.
     **/
    public void end_removeUserFromGroup(Ice.AsyncResult __result)
        throws InvalidChannelException,
               InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param source Group name to redirect from.
     * @param target Group name to redirect to.
     **/
    public void redirectWhisperGroup(int session, String source, String target)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param source Group name to redirect from.
     * @param target Group name to redirect to.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void redirectWhisperGroup(int session, String source, String target, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param target Group name to redirect to.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_redirectWhisperGroup(int session, String source, String target);

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param target Group name to redirect to.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_redirectWhisperGroup(int session, String source, String target, java.util.Map<String, String> __ctx);

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param target Group name to redirect to.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_redirectWhisperGroup(int session, String source, String target, Ice.Callback __cb);

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param target Group name to redirect to.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_redirectWhisperGroup(int session, String source, String target, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param target Group name to redirect to.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_redirectWhisperGroup(int session, String source, String target, Callback_Server_redirectWhisperGroup __cb);

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param session Connection ID of user. See {@link User.session}.
     * @param target Group name to redirect to.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_redirectWhisperGroup(int session, String source, String target, java.util.Map<String, String> __ctx, Callback_Server_redirectWhisperGroup __cb);

    /**
     * Redirect whisper targets for user. If set, whenever a user tries to whisper to group "source", the whisper will be redirected to group "target".
     * To remove a redirect pass an empty target string. This is intended for context groups.
     * @param __result The asynchronous result object.
     **/
    public void end_redirectWhisperGroup(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidSessionException,
               ServerBootedException;

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param List of ids.
     * @return Matching list of names, with an empty string representing invalid or unknown ids.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String> getUserNames(int[] ids)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param List of ids.
     * @param __ctx The Context map to send with the invocation.
     * @return Matching list of names, with an empty string representing invalid or unknown ids.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String> getUserNames(int[] ids, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserNames(int[] ids);

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserNames(int[] ids, java.util.Map<String, String> __ctx);

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserNames(int[] ids, Ice.Callback __cb);

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserNames(int[] ids, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserNames(int[] ids, Callback_Server_getUserNames __cb);

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserNames(int[] ids, java.util.Map<String, String> __ctx, Callback_Server_getUserNames __cb);

    /**
     * Map a list of {@link User.userid} to a matching name.
     * @param __result The asynchronous result object.
     * @return Matching list of names, with an empty string representing invalid or unknown ids.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String> end_getUserNames(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Map a list of user names to a matching id.
     * @param List of names.
     * @reuturn List of matching ids, with -1 representing invalid or unknown user names.
     **/
    public java.util.Map<java.lang.String, java.lang.Integer> getUserIds(String[] names)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Map a list of user names to a matching id.
     * @param List of names.
     * @reuturn List of matching ids, with -1 representing invalid or unknown user names.
     * @param __ctx The Context map to send with the invocation.
     **/
    public java.util.Map<java.lang.String, java.lang.Integer> getUserIds(String[] names, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Map a list of user names to a matching id.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserIds(String[] names);

    /**
     * Map a list of user names to a matching id.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserIds(String[] names, java.util.Map<String, String> __ctx);

    /**
     * Map a list of user names to a matching id.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserIds(String[] names, Ice.Callback __cb);

    /**
     * Map a list of user names to a matching id.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserIds(String[] names, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Map a list of user names to a matching id.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserIds(String[] names, Callback_Server_getUserIds __cb);

    /**
     * Map a list of user names to a matching id.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUserIds(String[] names, java.util.Map<String, String> __ctx, Callback_Server_getUserIds __cb);

    /**
     * Map a list of user names to a matching id.
     * @param __result The asynchronous result object.
     **/
    public java.util.Map<java.lang.String, java.lang.Integer> end_getUserIds(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @return The ID of the user. See {@link RegisteredUser.userid}.
     **/
    public int registerUser(java.util.Map<UserInfo, java.lang.String> info)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @param __ctx The Context map to send with the invocation.
     * @return The ID of the user. See {@link RegisteredUser.userid}.
     **/
    public int registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info);

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx);

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, Ice.Callback __cb);

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, Callback_Server_registerUser __cb);

    /**
     * Register a new user.
     * @param info Information about new user. Must include at least "name".
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Callback_Server_registerUser __cb);

    /**
     * Register a new user.
     * @param __result The asynchronous result object.
     * @return The ID of the user. See {@link RegisteredUser.userid}.
     **/
    public int end_registerUser(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     **/
    public void unregisterUser(int userid)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void unregisterUser(int userid, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterUser(int userid);

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterUser(int userid, java.util.Map<String, String> __ctx);

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterUser(int userid, Ice.Callback __cb);

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterUser(int userid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterUser(int userid, Callback_Server_unregisterUser __cb);

    /**
     * Remove a user registration.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_unregisterUser(int userid, java.util.Map<String, String> __ctx, Callback_Server_unregisterUser __cb);

    /**
     * Remove a user registration.
     * @param __result The asynchronous result object.
     **/
    public void end_unregisterUser(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param registration Updated registration record.
     **/
    public void updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param registration Updated registration record.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info);

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx);

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info, Ice.Callback __cb);

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info, Callback_Server_updateRegistration __cb);

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_updateRegistration(int userid, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Callback_Server_updateRegistration __cb);

    /**
     * Update the registration for a user. You can use this to set the email or password of a user,
     * and can also use it to change the user's name.
     * @param __result The asynchronous result object.
     **/
    public void end_updateRegistration(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @return Registration record.
     **/
    public java.util.Map<UserInfo, java.lang.String> getRegistration(int userid)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @return Registration record.
     **/
    public java.util.Map<UserInfo, java.lang.String> getRegistration(int userid, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegistration(int userid);

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegistration(int userid, java.util.Map<String, String> __ctx);

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegistration(int userid, Ice.Callback __cb);

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegistration(int userid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegistration(int userid, Callback_Server_getRegistration __cb);

    /**
     * Fetch registration for a single user.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegistration(int userid, java.util.Map<String, String> __ctx, Callback_Server_getRegistration __cb);

    /**
     * Fetch registration for a single user.
     * @param __result The asynchronous result object.
     * @return Registration record.
     **/
    public java.util.Map<UserInfo, java.lang.String> end_getRegistration(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @return List of registration records.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String> getRegisteredUsers(String filter)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @param __ctx The Context map to send with the invocation.
     * @return List of registration records.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String> getRegisteredUsers(String filter, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter);

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, java.util.Map<String, String> __ctx);

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, Ice.Callback __cb);

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, Callback_Server_getRegisteredUsers __cb);

    /**
     * Fetch a group of registered users.
     * @param filter Substring of user name. If blank, will retrieve all registered users.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, java.util.Map<String, String> __ctx, Callback_Server_getRegisteredUsers __cb);

    /**
     * Fetch a group of registered users.
     * @param __result The asynchronous result object.
     * @return List of registration records.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String> end_getRegisteredUsers(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @param pw User password.
     * @return User ID of registered user (See {@link RegisteredUser.userid}), -1 for failed authentication or -2 for unknown usernames.
     **/
    public int verifyPassword(String name, String pw)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @param pw User password.
     * @param __ctx The Context map to send with the invocation.
     * @return User ID of registered user (See {@link RegisteredUser.userid}), -1 for failed authentication or -2 for unknown usernames.
     **/
    public int verifyPassword(String name, String pw, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_verifyPassword(String name, String pw);

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_verifyPassword(String name, String pw, java.util.Map<String, String> __ctx);

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_verifyPassword(String name, String pw, Ice.Callback __cb);

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_verifyPassword(String name, String pw, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_verifyPassword(String name, String pw, Callback_Server_verifyPassword __cb);

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param name User name. See {@link RegisteredUser.name}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_verifyPassword(String name, String pw, java.util.Map<String, String> __ctx, Callback_Server_verifyPassword __cb);

    /**
     * Verify the password of a user. You can use this to verify a user's credentials.
     * @param __result The asynchronous result object.
     * @return User ID of registered user (See {@link RegisteredUser.userid}), -1 for failed authentication or -2 for unknown usernames.
     **/
    public int end_verifyPassword(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @return Custom texture associated with user or an empty texture.
     **/
    public byte[] getTexture(int userid)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @return Custom texture associated with user or an empty texture.
     **/
    public byte[] getTexture(int userid, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTexture(int userid);

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTexture(int userid, java.util.Map<String, String> __ctx);

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTexture(int userid, Ice.Callback __cb);

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTexture(int userid, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTexture(int userid, Callback_Server_getTexture __cb);

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getTexture(int userid, java.util.Map<String, String> __ctx, Callback_Server_getTexture __cb);

    /**
     * Fetch user texture. Textures are stored as zlib compress()ed 600x60 32-bit BGRA data.
     * @param __result The asynchronous result object.
     * @return Custom texture associated with user or an empty texture.
     **/
    public byte[] end_getTexture(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param tex Texture (as a Byte-Array) to set for the user, or an empty texture to remove the existing texture.
     **/
    public void setTexture(int userid, byte[] tex)
        throws InvalidSecretException,
               InvalidTextureException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param tex Texture (as a Byte-Array) to set for the user, or an empty texture to remove the existing texture.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setTexture(int userid, byte[] tex, java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               InvalidTextureException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTexture(int userid, byte[] tex);

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTexture(int userid, byte[] tex, java.util.Map<String, String> __ctx);

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTexture(int userid, byte[] tex, Ice.Callback __cb);

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTexture(int userid, byte[] tex, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTexture(int userid, byte[] tex, Callback_Server_setTexture __cb);

    /**
     * Set a user texture (now called avatar).
     * @param userid ID of registered user. See {@link RegisteredUser.userid}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setTexture(int userid, byte[] tex, java.util.Map<String, String> __ctx, Callback_Server_setTexture __cb);

    /**
     * Set a user texture (now called avatar).
     * @param __result The asynchronous result object.
     **/
    public void end_setTexture(Ice.AsyncResult __result)
        throws InvalidSecretException,
               InvalidTextureException,
               InvalidUserException,
               ServerBootedException;

    /**
     * Get virtual server uptime.
     * @return Uptime of the virtual server in seconds
     **/
    public int getUptime()
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Get virtual server uptime.
     * @param __ctx The Context map to send with the invocation.
     * @return Uptime of the virtual server in seconds
     **/
    public int getUptime(java.util.Map<String, String> __ctx)
        throws InvalidSecretException,
               ServerBootedException;

    /**
     * Get virtual server uptime.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime();

    /**
     * Get virtual server uptime.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(java.util.Map<String, String> __ctx);

    /**
     * Get virtual server uptime.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(Ice.Callback __cb);

    /**
     * Get virtual server uptime.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get virtual server uptime.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(Callback_Server_getUptime __cb);

    /**
     * Get virtual server uptime.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(java.util.Map<String, String> __ctx, Callback_Server_getUptime __cb);

    /**
     * Get virtual server uptime.
     * @param __result The asynchronous result object.
     * @return Uptime of the virtual server in seconds
     **/
    public int end_getUptime(Ice.AsyncResult __result)
        throws InvalidSecretException,
               ServerBootedException;
}
