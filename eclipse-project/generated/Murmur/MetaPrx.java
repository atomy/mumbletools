// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `MetaPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * This is the meta interface. It is primarily used for retrieving the {@link Server} interfaces for each individual server.
 **/
public interface MetaPrx extends Ice.ObjectPrx
{
    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @return Interface for specified server, or a null proxy if id is invalid.
     **/
    public ServerPrx getServer(int id)
        throws InvalidSecretException;

    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @param __ctx The Context map to send with the invocation.
     * @return Interface for specified server, or a null proxy if id is invalid.
     **/
    public ServerPrx getServer(int id, java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServer(int id);

    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServer(int id, java.util.Map<String, String> __ctx);

    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServer(int id, Ice.Callback __cb);

    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServer(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServer(int id, Callback_Meta_getServer __cb);

    /**
     * Fetch interface to specific server.
     * @param id Server ID. See {@link Server.getId}.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getServer(int id, java.util.Map<String, String> __ctx, Callback_Meta_getServer __cb);

    /**
     * Fetch interface to specific server.
     * @param __result The asynchronous result object.
     * @return Interface for specified server, or a null proxy if id is invalid.
     **/
    public ServerPrx end_getServer(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @return Interface for new server.
     **/
    public ServerPrx newServer()
        throws InvalidSecretException;

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __ctx The Context map to send with the invocation.
     * @return Interface for new server.
     **/
    public ServerPrx newServer(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newServer();

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newServer(java.util.Map<String, String> __ctx);

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newServer(Ice.Callback __cb);

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newServer(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newServer(Callback_Meta_newServer __cb);

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_newServer(java.util.Map<String, String> __ctx, Callback_Meta_newServer __cb);

    /**
     * Create a new server. Call {@link Server.getId} on the returned interface to find it's ID.
     * @param __result The asynchronous result object.
     * @return Interface for new server.
     **/
    public ServerPrx end_newServer(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Fetch list of all currently running servers.
     * @return List of interfaces for running servers.
     **/
    public ServerPrx[] getBootedServers()
        throws InvalidSecretException;

    /**
     * Fetch list of all currently running servers.
     * @param __ctx The Context map to send with the invocation.
     * @return List of interfaces for running servers.
     **/
    public ServerPrx[] getBootedServers(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Fetch list of all currently running servers.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBootedServers();

    /**
     * Fetch list of all currently running servers.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBootedServers(java.util.Map<String, String> __ctx);

    /**
     * Fetch list of all currently running servers.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBootedServers(Ice.Callback __cb);

    /**
     * Fetch list of all currently running servers.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBootedServers(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch list of all currently running servers.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBootedServers(Callback_Meta_getBootedServers __cb);

    /**
     * Fetch list of all currently running servers.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getBootedServers(java.util.Map<String, String> __ctx, Callback_Meta_getBootedServers __cb);

    /**
     * Fetch list of all currently running servers.
     * @param __result The asynchronous result object.
     * @return List of interfaces for running servers.
     **/
    public ServerPrx[] end_getBootedServers(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Fetch list of all defined servers.
     * @return List of interfaces for all servers.
     **/
    public ServerPrx[] getAllServers()
        throws InvalidSecretException;

    /**
     * Fetch list of all defined servers.
     * @param __ctx The Context map to send with the invocation.
     * @return List of interfaces for all servers.
     **/
    public ServerPrx[] getAllServers(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Fetch list of all defined servers.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllServers();

    /**
     * Fetch list of all defined servers.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllServers(java.util.Map<String, String> __ctx);

    /**
     * Fetch list of all defined servers.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllServers(Ice.Callback __cb);

    /**
     * Fetch list of all defined servers.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllServers(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch list of all defined servers.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllServers(Callback_Meta_getAllServers __cb);

    /**
     * Fetch list of all defined servers.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAllServers(java.util.Map<String, String> __ctx, Callback_Meta_getAllServers __cb);

    /**
     * Fetch list of all defined servers.
     * @param __result The asynchronous result object.
     * @return List of interfaces for all servers.
     **/
    public ServerPrx[] end_getAllServers(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @return Default configuration of the servers.
     **/
    public java.util.Map<java.lang.String, java.lang.String> getDefaultConf()
        throws InvalidSecretException;

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __ctx The Context map to send with the invocation.
     * @return Default configuration of the servers.
     **/
    public java.util.Map<java.lang.String, java.lang.String> getDefaultConf(java.util.Map<String, String> __ctx)
        throws InvalidSecretException;

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDefaultConf();

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDefaultConf(java.util.Map<String, String> __ctx);

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDefaultConf(Ice.Callback __cb);

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDefaultConf(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDefaultConf(Callback_Meta_getDefaultConf __cb);

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getDefaultConf(java.util.Map<String, String> __ctx, Callback_Meta_getDefaultConf __cb);

    /**
     * Fetch default configuraion. This returns the configuration items that were set in the configuration file, or
     * the built-in default. The individual servers will use these values unless they have been overridden in the
     * server specific configuration. The only special case is the port, which defaults to the value defined here +
     * the servers ID - 1 (so that virtual server #1 uses the defined port, server #2 uses port+1 etc).
     * @param __result The asynchronous result object.
     * @return Default configuration of the servers.
     **/
    public java.util.Map<java.lang.String, java.lang.String> end_getDefaultConf(Ice.AsyncResult __result)
        throws InvalidSecretException;

    /**
     * Fetch version of Murmur. 
     * @param major Major version.
     * @param minor Minor version.
     * @param patch Patchlevel.
     * @param text Textual representation of version. Note that this may not match the {@link major}, {@link minor} and {@link patch} levels, as it
     * may be simply the compile date or the SVN revision. This is usually the text you want to present to users.
     **/
    public void getVersion(Ice.IntHolder major, Ice.IntHolder minor, Ice.IntHolder patch, Ice.StringHolder text);

    /**
     * Fetch version of Murmur. 
     * @param major Major version.
     * @param minor Minor version.
     * @param patch Patchlevel.
     * @param text Textual representation of version. Note that this may not match the {@link major}, {@link minor} and {@link patch} levels, as it
     * may be simply the compile date or the SVN revision. This is usually the text you want to present to users.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void getVersion(Ice.IntHolder major, Ice.IntHolder minor, Ice.IntHolder patch, Ice.StringHolder text, java.util.Map<String, String> __ctx);

    /**
     * Fetch version of Murmur. 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getVersion();

    /**
     * Fetch version of Murmur. 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getVersion(java.util.Map<String, String> __ctx);

    /**
     * Fetch version of Murmur. 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getVersion(Ice.Callback __cb);

    /**
     * Fetch version of Murmur. 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getVersion(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Fetch version of Murmur. 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getVersion(Callback_Meta_getVersion __cb);

    /**
     * Fetch version of Murmur. 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getVersion(java.util.Map<String, String> __ctx, Callback_Meta_getVersion __cb);

    /**
     * Fetch version of Murmur. 
     * @param major Major version.
     * @param patch Patchlevel.
     * @param __result The asynchronous result object.
     **/
    public void end_getVersion(Ice.IntHolder major, Ice.IntHolder minor, Ice.IntHolder patch, Ice.StringHolder text, Ice.AsyncResult __result);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     **/
    public void addCallback(MetaCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException;

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void addCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx)
        throws InvalidCallbackException,
               InvalidSecretException;

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(MetaCallbackPrx cb);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(MetaCallbackPrx cb, Ice.Callback __cb);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(MetaCallbackPrx cb, Callback_Meta_addCallback __cb);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param cb Callback interface which will receive notifications.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_addCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Meta_addCallback __cb);

    /**
     * Add a callback. The callback will receive notifications when servers are started or stopped.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_addCallback(Ice.AsyncResult __result)
        throws InvalidCallbackException,
               InvalidSecretException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     **/
    public void removeCallback(MetaCallbackPrx cb)
        throws InvalidCallbackException,
               InvalidSecretException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __ctx The Context map to send with the invocation.
     **/
    public void removeCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx)
        throws InvalidCallbackException,
               InvalidSecretException;

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(MetaCallbackPrx cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(MetaCallbackPrx cb, Ice.Callback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(MetaCallbackPrx cb, Callback_Meta_removeCallback __cb);

    /**
     * Remove a callback.
     * 
     * @param cb Callback interface to be removed.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_removeCallback(MetaCallbackPrx cb, java.util.Map<String, String> __ctx, Callback_Meta_removeCallback __cb);

    /**
     * Remove a callback.
     * 
     * @param __result The asynchronous result object.
     **/
    public void end_removeCallback(Ice.AsyncResult __result)
        throws InvalidCallbackException,
               InvalidSecretException;

    /**
     * Get murmur uptime.
     * @return Uptime of murmur in seconds
     **/
    public int getUptime();

    /**
     * Get murmur uptime.
     * @param __ctx The Context map to send with the invocation.
     * @return Uptime of murmur in seconds
     **/
    public int getUptime(java.util.Map<String, String> __ctx);

    /**
     * Get murmur uptime.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime();

    /**
     * Get murmur uptime.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(java.util.Map<String, String> __ctx);

    /**
     * Get murmur uptime.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(Ice.Callback __cb);

    /**
     * Get murmur uptime.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get murmur uptime.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(Callback_Meta_getUptime __cb);

    /**
     * Get murmur uptime.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getUptime(java.util.Map<String, String> __ctx, Callback_Meta_getUptime __cb);

    /**
     * Get murmur uptime.
     * @param __result The asynchronous result object.
     * @return Uptime of murmur in seconds
     **/
    public int end_getUptime(Ice.AsyncResult __result);

    /**
     * Get slice file.
     * @return Contents of the slice file server compiled with.
     **/
    public String getSlice();

    /**
     * Get slice file.
     * @param __ctx The Context map to send with the invocation.
     * @return Contents of the slice file server compiled with.
     **/
    public String getSlice(java.util.Map<String, String> __ctx);

    /**
     * Get slice file.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSlice();

    /**
     * Get slice file.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSlice(java.util.Map<String, String> __ctx);

    /**
     * Get slice file.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSlice(Ice.Callback __cb);

    /**
     * Get slice file.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSlice(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get slice file.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSlice(Callback_Meta_getSlice __cb);

    /**
     * Get slice file.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSlice(java.util.Map<String, String> __ctx, Callback_Meta_getSlice __cb);

    /**
     * Get slice file.
     * @param __result The asynchronous result object.
     * @return Contents of the slice file server compiled with.
     **/
    public String end_getSlice(Ice.AsyncResult __result);

    /**
     * Returns a checksum dict for the slice file.
     * @return Checksum dict
     **/
    public java.util.Map<java.lang.String, java.lang.String> getSliceChecksums();

    /**
     * Returns a checksum dict for the slice file.
     * @param __ctx The Context map to send with the invocation.
     * @return Checksum dict
     **/
    public java.util.Map<java.lang.String, java.lang.String> getSliceChecksums(java.util.Map<String, String> __ctx);

    /**
     * Returns a checksum dict for the slice file.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSliceChecksums();

    /**
     * Returns a checksum dict for the slice file.
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSliceChecksums(java.util.Map<String, String> __ctx);

    /**
     * Returns a checksum dict for the slice file.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSliceChecksums(Ice.Callback __cb);

    /**
     * Returns a checksum dict for the slice file.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSliceChecksums(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Returns a checksum dict for the slice file.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSliceChecksums(Callback_Meta_getSliceChecksums __cb);

    /**
     * Returns a checksum dict for the slice file.
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getSliceChecksums(java.util.Map<String, String> __ctx, Callback_Meta_getSliceChecksums __cb);

    /**
     * Returns a checksum dict for the slice file.
     * @param __result The asynchronous result object.
     * @return Checksum dict
     **/
    public java.util.Map<java.lang.String, java.lang.String> end_getSliceChecksums(Ice.AsyncResult __result);
}
