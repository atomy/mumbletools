// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Ban.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * A single ip mask for a ban.
 **/
public class Ban implements java.lang.Cloneable, java.io.Serializable
{
    /**
     * Address to ban.
     **/
    public byte[] address;

    /**
     * Number of bits in ban to apply.
     **/
    public int bits;

    /**
     * Username associated with ban.
     **/
    public String name;

    /**
     * Hash of banned user.
     **/
    public String hash;

    /**
     * Reason for ban.
     **/
    public String reason;

    /**
     * Date ban was applied in unix time format.
     **/
    public int start;

    /**
     * Duration of ban.
     **/
    public int duration;

    public Ban()
    {
    }

    public Ban(byte[] address, int bits, String name, String hash, String reason, int start, int duration)
    {
        this.address = address;
        this.bits = bits;
        this.name = name;
        this.hash = hash;
        this.reason = reason;
        this.start = start;
        this.duration = duration;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Ban _r = null;
        try
        {
            _r = (Ban)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(address, _r.address))
            {
                return false;
            }
            if(bits != _r.bits)
            {
                return false;
            }
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(hash != _r.hash)
            {
                if(hash == null || _r.hash == null || !hash.equals(_r.hash))
                {
                    return false;
                }
            }
            if(reason != _r.reason)
            {
                if(reason == null || _r.reason == null || !reason.equals(_r.reason))
                {
                    return false;
                }
            }
            if(start != _r.start)
            {
                return false;
            }
            if(duration != _r.duration)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(address != null)
        {
            for(int __i0 = 0; __i0 < address.length; __i0++)
            {
                __h = 5 * __h + (int)address[__i0];
            }
        }
        __h = 5 * __h + bits;
        if(name != null)
        {
            __h = 5 * __h + name.hashCode();
        }
        if(hash != null)
        {
            __h = 5 * __h + hash.hashCode();
        }
        if(reason != null)
        {
            __h = 5 * __h + reason.hashCode();
        }
        __h = 5 * __h + start;
        __h = 5 * __h + duration;
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        NetAddressHelper.write(__os, address);
        __os.writeInt(bits);
        __os.writeString(name);
        __os.writeString(hash);
        __os.writeString(reason);
        __os.writeInt(start);
        __os.writeInt(duration);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        address = NetAddressHelper.read(__is);
        bits = __is.readInt();
        name = __is.readString();
        hash = __is.readString();
        reason = __is.readString();
        start = __is.readInt();
        duration = __is.readInt();
    }
}
