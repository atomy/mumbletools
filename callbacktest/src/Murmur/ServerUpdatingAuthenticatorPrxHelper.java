// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ServerUpdatingAuthenticatorPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * Callback interface for server authentication and registration. This allows you to support both authentication
 * and account updating.
 * You do not need to implement this if all you want is authentication, you only need this if other scripts
 * connected to the same server calls e.g. {@link Server.setTexture}.
 * Almost all of these methods support fall through, meaning murmur should continue the operation against its
 * own database.
 **/
public final class ServerUpdatingAuthenticatorPrxHelper extends Ice.ObjectPrxHelperBase implements ServerUpdatingAuthenticatorPrx
{
    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param name Username to authenticate.
     * @param pw Password to authenticate with.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certhash Hash of user certificate, as used by murmur internally when matching.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     * @param newname Set this to change the username from the supplied one.
     * @param groups List of groups on the root channel that the user will be added to for the duration of the connection.
     * @return UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).
     **/
    public int
    authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, Ice.StringHolder newname, GroupNameListHolder groups)
    {
        return authenticate(name, pw, certificates, certhash, certstrong, newname, groups, null, false);
    }

    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param name Username to authenticate.
     * @param pw Password to authenticate with.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certhash Hash of user certificate, as used by murmur internally when matching.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     * @param newname Set this to change the username from the supplied one.
     * @param groups List of groups on the root channel that the user will be added to for the duration of the connection.
     * @param __ctx The Context map to send with the invocation.
     * @return UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).
     **/
    public int
    authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, Ice.StringHolder newname, GroupNameListHolder groups, java.util.Map<String, String> __ctx)
    {
        return authenticate(name, pw, certificates, certhash, certstrong, newname, groups, __ctx, true);
    }

    private int
    authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, Ice.StringHolder newname, GroupNameListHolder groups, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("authenticate");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.authenticate(name, pw, certificates, certhash, certstrong, newname, groups, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __authenticate_name = "authenticate";

    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param __cb The callback object for the operation.
     * @param name Username to authenticate.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     **/
    public Ice.AsyncResult begin_authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong)
    {
        return begin_authenticate(name, pw, certificates, certhash, certstrong, null, false, null);
    }

    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param __cb The callback object for the operation.
     * @param name Username to authenticate.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, java.util.Map<String, String> __ctx)
    {
        return begin_authenticate(name, pw, certificates, certhash, certstrong, __ctx, true, null);
    }

    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param __cb The callback object for the operation.
     * @param name Username to authenticate.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     **/
    public Ice.AsyncResult begin_authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, Ice.Callback __cb)
    {
        return begin_authenticate(name, pw, certificates, certhash, certstrong, null, false, __cb);
    }

    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param __cb The callback object for the operation.
     * @param name Username to authenticate.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_authenticate(name, pw, certificates, certhash, certstrong, __ctx, true, __cb);
    }

    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param __cb The callback object for the operation.
     * @param name Username to authenticate.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     **/
    public Ice.AsyncResult begin_authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, Callback_ServerAuthenticator_authenticate __cb)
    {
        return begin_authenticate(name, pw, certificates, certhash, certstrong, null, false, __cb);
    }

    /**
     * Called to authenticate a user. If you do not know the username in question, always return -2 from this
     * method to fall through to normal database authentication.
     * Note that if authentication succeeds, murmur will create a record of the user in it's database, reserving
     * the username and id so it cannot be used for normal database authentication.
     * The data in the certificate (name, email addresses etc), as well as the list of signing certificates,
     * should only be trusted if certstrong is true.
     * 
     * @param __cb The callback object for the operation.
     * @param name Username to authenticate.
     * @param certificates List of der encoded certificates the user connected with.
     * @param certstrong True if certificate was valid and signed by a trusted CA.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, java.util.Map<String, String> __ctx, Callback_ServerAuthenticator_authenticate __cb)
    {
        return begin_authenticate(name, pw, certificates, certhash, certstrong, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_authenticate(String name, String pw, byte[][] certificates, String certhash, boolean certstrong, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__authenticate_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __authenticate_name, __cb);
        try
        {
            __result.__prepare(__authenticate_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.writeString(pw);
            CertificateListHelper.write(__os, certificates);
            __os.writeString(certhash);
            __os.writeBool(certstrong);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) UserID of authenticated user, -1 for authentication failures and -2 for unknown user (fallthrough).
     * @param newname Set this to change the username from the supplied one.
     **/
    public int end_authenticate(Ice.StringHolder newname, GroupNameListHolder groups, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __authenticate_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        newname.value = __is.readString();
        groups.value = GroupNameListHelper.read(__is);
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param id User id.
     * @param info Information about user. This needs to include at least "name".
     * @return true if information is present, false to fall through.
     **/
    public boolean
    getInfo(int id, UserInfoMapHolder info)
    {
        return getInfo(id, info, null, false);
    }

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param id User id.
     * @param info Information about user. This needs to include at least "name".
     * @param __ctx The Context map to send with the invocation.
     * @return true if information is present, false to fall through.
     **/
    public boolean
    getInfo(int id, UserInfoMapHolder info, java.util.Map<String, String> __ctx)
    {
        return getInfo(id, info, __ctx, true);
    }

    private boolean
    getInfo(int id, UserInfoMapHolder info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getInfo");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.getInfo(id, info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getInfo_name = "getInfo";

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param __cb The callback object for the operation.
     * @param id User id.
     **/
    public Ice.AsyncResult begin_getInfo(int id)
    {
        return begin_getInfo(id, null, false, null);
    }

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param __cb The callback object for the operation.
     * @param id User id.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getInfo(int id, java.util.Map<String, String> __ctx)
    {
        return begin_getInfo(id, __ctx, true, null);
    }

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param __cb The callback object for the operation.
     * @param id User id.
     **/
    public Ice.AsyncResult begin_getInfo(int id, Ice.Callback __cb)
    {
        return begin_getInfo(id, null, false, __cb);
    }

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param __cb The callback object for the operation.
     * @param id User id.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getInfo(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInfo(id, __ctx, true, __cb);
    }

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param __cb The callback object for the operation.
     * @param id User id.
     **/
    public Ice.AsyncResult begin_getInfo(int id, Callback_ServerAuthenticator_getInfo __cb)
    {
        return begin_getInfo(id, null, false, __cb);
    }

    /**
     * Fetch information about a user. This is used to retrieve information like email address, keyhash etc. If you
     * want murmur to take care of this information itself, simply return false to fall through.
     * @param __cb The callback object for the operation.
     * @param id User id.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getInfo(int id, java.util.Map<String, String> __ctx, Callback_ServerAuthenticator_getInfo __cb)
    {
        return begin_getInfo(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInfo(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInfo_name, __cb);
        try
        {
            __result.__prepare(__getInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(id);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) true if information is present, false to fall through.
     * @param info Information about user. This needs to include at least "name".
     **/
    public boolean end_getInfo(UserInfoMapHolder info, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        info.value = UserInfoMapHelper.read(__is);
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Map a user id to a username.
     * @param id User id to map.
     * @return Name of user or empty string for unknown id.
     **/
    public String
    idToName(int id)
    {
        return idToName(id, null, false);
    }

    /**
     * Map a user id to a username.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     * @return Name of user or empty string for unknown id.
     **/
    public String
    idToName(int id, java.util.Map<String, String> __ctx)
    {
        return idToName(id, __ctx, true);
    }

    private String
    idToName(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("idToName");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.idToName(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __idToName_name = "idToName";

    /**
     * Map a user id to a username.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     **/
    public Ice.AsyncResult begin_idToName(int id)
    {
        return begin_idToName(id, null, false, null);
    }

    /**
     * Map a user id to a username.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_idToName(int id, java.util.Map<String, String> __ctx)
    {
        return begin_idToName(id, __ctx, true, null);
    }

    /**
     * Map a user id to a username.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     **/
    public Ice.AsyncResult begin_idToName(int id, Ice.Callback __cb)
    {
        return begin_idToName(id, null, false, __cb);
    }

    /**
     * Map a user id to a username.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_idToName(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_idToName(id, __ctx, true, __cb);
    }

    /**
     * Map a user id to a username.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     **/
    public Ice.AsyncResult begin_idToName(int id, Callback_ServerAuthenticator_idToName __cb)
    {
        return begin_idToName(id, null, false, __cb);
    }

    /**
     * Map a user id to a username.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_idToName(int id, java.util.Map<String, String> __ctx, Callback_ServerAuthenticator_idToName __cb)
    {
        return begin_idToName(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_idToName(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__idToName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __idToName_name, __cb);
        try
        {
            __result.__prepare(__idToName_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(id);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) Name of user or empty string for unknown id.
     **/
    public String end_idToName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __idToName_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Map a user to a custom Texture.
     * @param id User id to map.
     * @return User texture or an empty texture for unknwon users or users without textures.
     **/
    public byte[]
    idToTexture(int id)
    {
        return idToTexture(id, null, false);
    }

    /**
     * Map a user to a custom Texture.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     * @return User texture or an empty texture for unknwon users or users without textures.
     **/
    public byte[]
    idToTexture(int id, java.util.Map<String, String> __ctx)
    {
        return idToTexture(id, __ctx, true);
    }

    private byte[]
    idToTexture(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("idToTexture");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.idToTexture(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __idToTexture_name = "idToTexture";

    /**
     * Map a user to a custom Texture.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     **/
    public Ice.AsyncResult begin_idToTexture(int id)
    {
        return begin_idToTexture(id, null, false, null);
    }

    /**
     * Map a user to a custom Texture.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_idToTexture(int id, java.util.Map<String, String> __ctx)
    {
        return begin_idToTexture(id, __ctx, true, null);
    }

    /**
     * Map a user to a custom Texture.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     **/
    public Ice.AsyncResult begin_idToTexture(int id, Ice.Callback __cb)
    {
        return begin_idToTexture(id, null, false, __cb);
    }

    /**
     * Map a user to a custom Texture.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_idToTexture(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_idToTexture(id, __ctx, true, __cb);
    }

    /**
     * Map a user to a custom Texture.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     **/
    public Ice.AsyncResult begin_idToTexture(int id, Callback_ServerAuthenticator_idToTexture __cb)
    {
        return begin_idToTexture(id, null, false, __cb);
    }

    /**
     * Map a user to a custom Texture.
     * @param __cb The callback object for the operation.
     * @param id User id to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_idToTexture(int id, java.util.Map<String, String> __ctx, Callback_ServerAuthenticator_idToTexture __cb)
    {
        return begin_idToTexture(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_idToTexture(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__idToTexture_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __idToTexture_name, __cb);
        try
        {
            __result.__prepare(__idToTexture_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(id);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) User texture or an empty texture for unknwon users or users without textures.
     **/
    public byte[] end_idToTexture(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __idToTexture_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        byte[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = TextureHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Map a name to a user id.
     * @param name Username to map.
     * @return User id or -2 for unknown name.
     **/
    public int
    nameToId(String name)
    {
        return nameToId(name, null, false);
    }

    /**
     * Map a name to a user id.
     * @param name Username to map.
     * @param __ctx The Context map to send with the invocation.
     * @return User id or -2 for unknown name.
     **/
    public int
    nameToId(String name, java.util.Map<String, String> __ctx)
    {
        return nameToId(name, __ctx, true);
    }

    private int
    nameToId(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("nameToId");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.nameToId(name, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __nameToId_name = "nameToId";

    /**
     * Map a name to a user id.
     * @param __cb The callback object for the operation.
     * @param name Username to map.
     **/
    public Ice.AsyncResult begin_nameToId(String name)
    {
        return begin_nameToId(name, null, false, null);
    }

    /**
     * Map a name to a user id.
     * @param __cb The callback object for the operation.
     * @param name Username to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_nameToId(String name, java.util.Map<String, String> __ctx)
    {
        return begin_nameToId(name, __ctx, true, null);
    }

    /**
     * Map a name to a user id.
     * @param __cb The callback object for the operation.
     * @param name Username to map.
     **/
    public Ice.AsyncResult begin_nameToId(String name, Ice.Callback __cb)
    {
        return begin_nameToId(name, null, false, __cb);
    }

    /**
     * Map a name to a user id.
     * @param __cb The callback object for the operation.
     * @param name Username to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_nameToId(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_nameToId(name, __ctx, true, __cb);
    }

    /**
     * Map a name to a user id.
     * @param __cb The callback object for the operation.
     * @param name Username to map.
     **/
    public Ice.AsyncResult begin_nameToId(String name, Callback_ServerAuthenticator_nameToId __cb)
    {
        return begin_nameToId(name, null, false, __cb);
    }

    /**
     * Map a name to a user id.
     * @param __cb The callback object for the operation.
     * @param name Username to map.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_nameToId(String name, java.util.Map<String, String> __ctx, Callback_ServerAuthenticator_nameToId __cb)
    {
        return begin_nameToId(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_nameToId(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__nameToId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __nameToId_name, __cb);
        try
        {
            __result.__prepare(__nameToId_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) User id or -2 for unknown name.
     **/
    public int end_nameToId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __nameToId_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Get a list of registered users matching filter.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     * @return List of matching registered users.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String>
    getRegisteredUsers(String filter)
    {
        return getRegisteredUsers(filter, null, false);
    }

    /**
     * Get a list of registered users matching filter.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     * @param __ctx The Context map to send with the invocation.
     * @return List of matching registered users.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String>
    getRegisteredUsers(String filter, java.util.Map<String, String> __ctx)
    {
        return getRegisteredUsers(filter, __ctx, true);
    }

    private java.util.Map<java.lang.Integer, java.lang.String>
    getRegisteredUsers(String filter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getRegisteredUsers");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.getRegisteredUsers(filter, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getRegisteredUsers_name = "getRegisteredUsers";

    /**
     * Get a list of registered users matching filter.
     * @param __cb The callback object for the operation.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter)
    {
        return begin_getRegisteredUsers(filter, null, false, null);
    }

    /**
     * Get a list of registered users matching filter.
     * @param __cb The callback object for the operation.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, java.util.Map<String, String> __ctx)
    {
        return begin_getRegisteredUsers(filter, __ctx, true, null);
    }

    /**
     * Get a list of registered users matching filter.
     * @param __cb The callback object for the operation.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, Ice.Callback __cb)
    {
        return begin_getRegisteredUsers(filter, null, false, __cb);
    }

    /**
     * Get a list of registered users matching filter.
     * @param __cb The callback object for the operation.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRegisteredUsers(filter, __ctx, true, __cb);
    }

    /**
     * Get a list of registered users matching filter.
     * @param __cb The callback object for the operation.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, Callback_ServerUpdatingAuthenticator_getRegisteredUsers __cb)
    {
        return begin_getRegisteredUsers(filter, null, false, __cb);
    }

    /**
     * Get a list of registered users matching filter.
     * @param __cb The callback object for the operation.
     * @param filter Substring usernames must contain. If empty, return all registered users.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getRegisteredUsers(String filter, java.util.Map<String, String> __ctx, Callback_ServerUpdatingAuthenticator_getRegisteredUsers __cb)
    {
        return begin_getRegisteredUsers(filter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRegisteredUsers(String filter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRegisteredUsers_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRegisteredUsers_name, __cb);
        try
        {
            __result.__prepare(__getRegisteredUsers_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(filter);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) List of matching registered users.
     **/
    public java.util.Map<java.lang.Integer, java.lang.String> end_getRegisteredUsers(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRegisteredUsers_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.Map<java.lang.Integer, java.lang.String> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = NameMapHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Register a new user.
     * @param info Information about user to register.
     * @return User id of new user, -1 for registration failure, or -2 to fall through.
     **/
    public int
    registerUser(java.util.Map<UserInfo, java.lang.String> info)
    {
        return registerUser(info, null, false);
    }

    /**
     * Register a new user.
     * @param info Information about user to register.
     * @param __ctx The Context map to send with the invocation.
     * @return User id of new user, -1 for registration failure, or -2 to fall through.
     **/
    public int
    registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx)
    {
        return registerUser(info, __ctx, true);
    }

    private int
    registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("registerUser");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.registerUser(info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __registerUser_name = "registerUser";

    /**
     * Register a new user.
     * @param __cb The callback object for the operation.
     * @param info Information about user to register.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info)
    {
        return begin_registerUser(info, null, false, null);
    }

    /**
     * Register a new user.
     * @param __cb The callback object for the operation.
     * @param info Information about user to register.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx)
    {
        return begin_registerUser(info, __ctx, true, null);
    }

    /**
     * Register a new user.
     * @param __cb The callback object for the operation.
     * @param info Information about user to register.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, Ice.Callback __cb)
    {
        return begin_registerUser(info, null, false, __cb);
    }

    /**
     * Register a new user.
     * @param __cb The callback object for the operation.
     * @param info Information about user to register.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerUser(info, __ctx, true, __cb);
    }

    /**
     * Register a new user.
     * @param __cb The callback object for the operation.
     * @param info Information about user to register.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, Callback_ServerUpdatingAuthenticator_registerUser __cb)
    {
        return begin_registerUser(info, null, false, __cb);
    }

    /**
     * Register a new user.
     * @param __cb The callback object for the operation.
     * @param info Information about user to register.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Callback_ServerUpdatingAuthenticator_registerUser __cb)
    {
        return begin_registerUser(info, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_registerUser(java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __registerUser_name, __cb);
        try
        {
            __result.__prepare(__registerUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            UserInfoMapHelper.write(__os, info);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) User id of new user, -1 for registration failure, or -2 to fall through.
     **/
    public int end_registerUser(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __registerUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Set additional information for user registration.
     * @param id Userid of registered user.
     * @param info Information to set about user. This should be merged with existing information.
     * @return 1 for successfull update, 0 for unsuccessfull update, -1 to fall through.
     **/
    public int
    setInfo(int id, java.util.Map<UserInfo, java.lang.String> info)
    {
        return setInfo(id, info, null, false);
    }

    /**
     * Set additional information for user registration.
     * @param id Userid of registered user.
     * @param info Information to set about user. This should be merged with existing information.
     * @param __ctx The Context map to send with the invocation.
     * @return 1 for successfull update, 0 for unsuccessfull update, -1 to fall through.
     **/
    public int
    setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx)
    {
        return setInfo(id, info, __ctx, true);
    }

    private int
    setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setInfo");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.setInfo(id, info, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setInfo_name = "setInfo";

    /**
     * Set additional information for user registration.
     * @param __cb The callback object for the operation.
     * @param id Userid of registered user.
     **/
    public Ice.AsyncResult begin_setInfo(int id, java.util.Map<UserInfo, java.lang.String> info)
    {
        return begin_setInfo(id, info, null, false, null);
    }

    /**
     * Set additional information for user registration.
     * @param __cb The callback object for the operation.
     * @param id Userid of registered user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx)
    {
        return begin_setInfo(id, info, __ctx, true, null);
    }

    /**
     * Set additional information for user registration.
     * @param __cb The callback object for the operation.
     * @param id Userid of registered user.
     **/
    public Ice.AsyncResult begin_setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, Ice.Callback __cb)
    {
        return begin_setInfo(id, info, null, false, __cb);
    }

    /**
     * Set additional information for user registration.
     * @param __cb The callback object for the operation.
     * @param id Userid of registered user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setInfo(id, info, __ctx, true, __cb);
    }

    /**
     * Set additional information for user registration.
     * @param __cb The callback object for the operation.
     * @param id Userid of registered user.
     **/
    public Ice.AsyncResult begin_setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, Callback_ServerUpdatingAuthenticator_setInfo __cb)
    {
        return begin_setInfo(id, info, null, false, __cb);
    }

    /**
     * Set additional information for user registration.
     * @param __cb The callback object for the operation.
     * @param id Userid of registered user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, Callback_ServerUpdatingAuthenticator_setInfo __cb)
    {
        return begin_setInfo(id, info, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setInfo(int id, java.util.Map<UserInfo, java.lang.String> info, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setInfo_name, __cb);
        try
        {
            __result.__prepare(__setInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(id);
            UserInfoMapHelper.write(__os, info);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 1 for successfull update, 0 for unsuccessfull update, -1 to fall through.
     **/
    public int end_setInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Set texture (now called avatar) of user registration.
     * @param id registrationId of registered user.
     * @param tex New texture.
     * @return 1 for successfull update, 0 for unsuccessfull update, -1 to fall through.
     **/
    public int
    setTexture(int id, byte[] tex)
    {
        return setTexture(id, tex, null, false);
    }

    /**
     * Set texture (now called avatar) of user registration.
     * @param id registrationId of registered user.
     * @param tex New texture.
     * @param __ctx The Context map to send with the invocation.
     * @return 1 for successfull update, 0 for unsuccessfull update, -1 to fall through.
     **/
    public int
    setTexture(int id, byte[] tex, java.util.Map<String, String> __ctx)
    {
        return setTexture(id, tex, __ctx, true);
    }

    private int
    setTexture(int id, byte[] tex, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setTexture");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.setTexture(id, tex, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setTexture_name = "setTexture";

    /**
     * Set texture (now called avatar) of user registration.
     * @param __cb The callback object for the operation.
     * @param id registrationId of registered user.
     **/
    public Ice.AsyncResult begin_setTexture(int id, byte[] tex)
    {
        return begin_setTexture(id, tex, null, false, null);
    }

    /**
     * Set texture (now called avatar) of user registration.
     * @param __cb The callback object for the operation.
     * @param id registrationId of registered user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setTexture(int id, byte[] tex, java.util.Map<String, String> __ctx)
    {
        return begin_setTexture(id, tex, __ctx, true, null);
    }

    /**
     * Set texture (now called avatar) of user registration.
     * @param __cb The callback object for the operation.
     * @param id registrationId of registered user.
     **/
    public Ice.AsyncResult begin_setTexture(int id, byte[] tex, Ice.Callback __cb)
    {
        return begin_setTexture(id, tex, null, false, __cb);
    }

    /**
     * Set texture (now called avatar) of user registration.
     * @param __cb The callback object for the operation.
     * @param id registrationId of registered user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setTexture(int id, byte[] tex, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTexture(id, tex, __ctx, true, __cb);
    }

    /**
     * Set texture (now called avatar) of user registration.
     * @param __cb The callback object for the operation.
     * @param id registrationId of registered user.
     **/
    public Ice.AsyncResult begin_setTexture(int id, byte[] tex, Callback_ServerUpdatingAuthenticator_setTexture __cb)
    {
        return begin_setTexture(id, tex, null, false, __cb);
    }

    /**
     * Set texture (now called avatar) of user registration.
     * @param __cb The callback object for the operation.
     * @param id registrationId of registered user.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setTexture(int id, byte[] tex, java.util.Map<String, String> __ctx, Callback_ServerUpdatingAuthenticator_setTexture __cb)
    {
        return begin_setTexture(id, tex, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTexture(int id, byte[] tex, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setTexture_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTexture_name, __cb);
        try
        {
            __result.__prepare(__setTexture_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(id);
            TextureHelper.write(__os, tex);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 1 for successfull update, 0 for unsuccessfull update, -1 to fall through.
     **/
    public int end_setTexture(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setTexture_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Unregister a user.
     * @param id Userid to unregister.
     * @return 1 for successfull unregistration, 0 for unsuccessfull unregistration, -1 to fall through.
     **/
    public int
    unregisterUser(int id)
    {
        return unregisterUser(id, null, false);
    }

    /**
     * Unregister a user.
     * @param id Userid to unregister.
     * @param __ctx The Context map to send with the invocation.
     * @return 1 for successfull unregistration, 0 for unsuccessfull unregistration, -1 to fall through.
     **/
    public int
    unregisterUser(int id, java.util.Map<String, String> __ctx)
    {
        return unregisterUser(id, __ctx, true);
    }

    private int
    unregisterUser(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("unregisterUser");
                __delBase = __getDelegate(false);
                _ServerUpdatingAuthenticatorDel __del = (_ServerUpdatingAuthenticatorDel)__delBase;
                return __del.unregisterUser(id, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unregisterUser_name = "unregisterUser";

    /**
     * Unregister a user.
     * @param __cb The callback object for the operation.
     * @param id Userid to unregister.
     **/
    public Ice.AsyncResult begin_unregisterUser(int id)
    {
        return begin_unregisterUser(id, null, false, null);
    }

    /**
     * Unregister a user.
     * @param __cb The callback object for the operation.
     * @param id Userid to unregister.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterUser(int id, java.util.Map<String, String> __ctx)
    {
        return begin_unregisterUser(id, __ctx, true, null);
    }

    /**
     * Unregister a user.
     * @param __cb The callback object for the operation.
     * @param id Userid to unregister.
     **/
    public Ice.AsyncResult begin_unregisterUser(int id, Ice.Callback __cb)
    {
        return begin_unregisterUser(id, null, false, __cb);
    }

    /**
     * Unregister a user.
     * @param __cb The callback object for the operation.
     * @param id Userid to unregister.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterUser(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unregisterUser(id, __ctx, true, __cb);
    }

    /**
     * Unregister a user.
     * @param __cb The callback object for the operation.
     * @param id Userid to unregister.
     **/
    public Ice.AsyncResult begin_unregisterUser(int id, Callback_ServerUpdatingAuthenticator_unregisterUser __cb)
    {
        return begin_unregisterUser(id, null, false, __cb);
    }

    /**
     * Unregister a user.
     * @param __cb The callback object for the operation.
     * @param id Userid to unregister.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_unregisterUser(int id, java.util.Map<String, String> __ctx, Callback_ServerUpdatingAuthenticator_unregisterUser __cb)
    {
        return begin_unregisterUser(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unregisterUser(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__unregisterUser_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unregisterUser_name, __cb);
        try
        {
            __result.__prepare(__unregisterUser_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(id);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 1 for successfull unregistration, 0 for unsuccessfull unregistration, -1 to fall through.
     **/
    public int end_unregisterUser(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __unregisterUser_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    public static ServerUpdatingAuthenticatorPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ServerUpdatingAuthenticatorPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerUpdatingAuthenticatorPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ServerUpdatingAuthenticatorPrxHelper __h = new ServerUpdatingAuthenticatorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerUpdatingAuthenticatorPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ServerUpdatingAuthenticatorPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerUpdatingAuthenticatorPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ServerUpdatingAuthenticatorPrxHelper __h = new ServerUpdatingAuthenticatorPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerUpdatingAuthenticatorPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerUpdatingAuthenticatorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ServerUpdatingAuthenticatorPrxHelper __h = new ServerUpdatingAuthenticatorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerUpdatingAuthenticatorPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ServerUpdatingAuthenticatorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ServerUpdatingAuthenticatorPrxHelper __h = new ServerUpdatingAuthenticatorPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerUpdatingAuthenticatorPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ServerUpdatingAuthenticatorPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerUpdatingAuthenticatorPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ServerUpdatingAuthenticatorPrxHelper __h = new ServerUpdatingAuthenticatorPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ServerUpdatingAuthenticatorPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerUpdatingAuthenticatorPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ServerUpdatingAuthenticatorPrxHelper __h = new ServerUpdatingAuthenticatorPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Murmur::ServerAuthenticator",
        "::Murmur::ServerUpdatingAuthenticator"
    };

    public static String
    ice_staticId()
    {
        return __ids[2];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ServerUpdatingAuthenticatorDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ServerUpdatingAuthenticatorDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ServerUpdatingAuthenticatorPrx v)
    {
        __os.writeProxy(v);
    }

    public static ServerUpdatingAuthenticatorPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ServerUpdatingAuthenticatorPrxHelper result = new ServerUpdatingAuthenticatorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
