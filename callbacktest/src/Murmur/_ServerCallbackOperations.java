// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_ServerCallbackOperations.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Murmur;

/**
 * Callback interface for servers. You can supply an implementation of this to receive notification
 * messages from the server.
 * If an added callback ever throws an exception or goes away, it will be automatically removed.
 * Please note that all callbacks are done asynchronously; murmur does not wait for the callback to
 * complete before continuing processing.
 * Note that callbacks are removed when a server is stopped, so you should have a callback for
 * {@link MetaCallback.started} which calls {@link Server.addCallback}.
 * @see MetaCallback
 * @see Server.addCallback
 **/
public interface _ServerCallbackOperations
{
    /**
     * Called when a user connects to the server. 
     * @param state State of connected user.
     * @param __current The Current object for the invocation.
     **/
    void userConnected(User state, Ice.Current __current);

    /**
     * Called when a user disconnects from the server. The user has already been removed, so you can no longer use methods like {@link Server.getState}
     * to retrieve the user's state.
     * @param state State of disconnected user.
     * @param __current The Current object for the invocation.
     **/
    void userDisconnected(User state, Ice.Current __current);

    /**
     * Called when a user state changes. This is called if the user moves, is renamed, is muted, deafened etc.
     * @param state New state of user.
     * @param __current The Current object for the invocation.
     **/
    void userStateChanged(User state, Ice.Current __current);

    /**
     * Called when a new channel is created. 
     * @param state State of new channel.
     * @param __current The Current object for the invocation.
     **/
    void channelCreated(Channel state, Ice.Current __current);

    /**
     * Called when a channel is removed. The channel has already been removed, you can no longer use methods like {@link Server.getChannelState}
     * @param state State of removed channel.
     * @param __current The Current object for the invocation.
     **/
    void channelRemoved(Channel state, Ice.Current __current);

    /**
     * Called when a new channel state changes. This is called if the channel is moved, renamed or if new links are added.
     * @param state New state of channel.
     * @param __current The Current object for the invocation.
     **/
    void channelStateChanged(Channel state, Ice.Current __current);
}
